module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @verifier.assume(i1)
  llvm.func @nd_bv4() -> i4
  llvm.func @nd_bv16() -> i16
  llvm.func @nd_bv1() -> i1
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i16) : i16
    %1 = llvm.call @nd_bv1() : () -> i1
    %2 = llvm.call @nd_bv1() : () -> i1
    %3 = llvm.call @nd_bv16() : () -> i16
    %4 = llvm.call @nd_bv1() : () -> i1
    %5 = llvm.call @nd_bv4() : () -> i4
    %6 = llvm.call @nd_bv4() : () -> i4
    %7 = llvm.call @nd_bv16() : () -> i16
    llvm.br ^bb1(%1, %2, %3, %4, %0, %5, %6, %7 : i1, i1, i16, i1, i16, i4, i4, i16)
  ^bb1(%8: i1, %9: i1, %10: i16, %11: i1, %12: i16, %13: i4, %14: i4, %15: i16):  // 2 preds: ^bb0, ^bb2
    %16 = llvm.mlir.constant(true) : i1
    %17 = llvm.mlir.constant(-2 : i3) : i3
    %18 = llvm.zext %17 : i3 to i4
    %19 = llvm.icmp "ule" %13, %18 : i4
    %20 = llvm.mlir.constant(-4 : i3) : i3
    %21 = llvm.zext %20 : i3 to i4
    %22 = llvm.icmp "ule" %21, %13 : i4
    %23 = llvm.and %22, %19  : i1
    %24 = llvm.mlir.constant(-7 : i4) : i4
    %25 = llvm.icmp "eq" %14, %24 : i4
    %26 = llvm.select %25, %23, %16 : i1, i1
    %27 = llvm.call @nd_bv1() : () -> i1
    %28 = llvm.select %27, %16, %26 : i1, i1
    %29 = llvm.call @nd_bv1() : () -> i1
    %30 = llvm.mlir.constant(false) : i1
    %31 = llvm.select %27, %30, %29 : i1, i1
    %32 = llvm.mlir.constant(-64 : i7) : i7
    %33 = llvm.zext %32 : i7 to i23
    %34 = llvm.mlir.constant(0 : i16) : i16
    %35 = llvm.sub %34, %15  : i16
    %36 = llvm.mlir.constant(0 : i16) : i16
    %37 = llvm.sub %36, %10  : i16
    %38 = llvm.select %11, %37, %10 : i1, i16
    %39 = llvm.mlir.constant(3 : i4) : i4
    %40 = llvm.zext %9 : i1 to i4
    %41 = llvm.shl %40, %39  : i4
    %42 = llvm.zext %20 : i3 to i4
    %43 = llvm.or %41, %42  : i4
    %44 = llvm.mlir.constant(true) : i1
    %45 = llvm.xor %9, %44  : i1
    %46 = llvm.mlir.constant(4 : i5) : i5
    %47 = llvm.zext %45 : i1 to i5
    %48 = llvm.shl %47, %46  : i5
    %49 = llvm.zext %43 : i4 to i5
    %50 = llvm.or %48, %49  : i5
    %51 = llvm.mlir.constant(5 : i6) : i6
    %52 = llvm.zext %9 : i1 to i6
    %53 = llvm.shl %52, %51  : i6
    %54 = llvm.zext %50 : i5 to i6
    %55 = llvm.or %53, %54  : i6
    %56 = llvm.mlir.constant(6 : i7) : i7
    %57 = llvm.zext %45 : i1 to i7
    %58 = llvm.shl %57, %56  : i7
    %59 = llvm.zext %55 : i6 to i7
    %60 = llvm.or %58, %59  : i7
    %61 = llvm.mlir.constant(7 : i8) : i8
    %62 = llvm.zext %45 : i1 to i8
    %63 = llvm.shl %62, %61  : i8
    %64 = llvm.zext %60 : i7 to i8
    %65 = llvm.or %63, %64  : i8
    %66 = llvm.mlir.constant(8 : i9) : i9
    %67 = llvm.zext %9 : i1 to i9
    %68 = llvm.shl %67, %66  : i9
    %69 = llvm.zext %65 : i8 to i9
    %70 = llvm.or %68, %69  : i9
    %71 = llvm.mlir.constant(9 : i10) : i10
    %72 = llvm.zext %45 : i1 to i10
    %73 = llvm.shl %72, %71  : i10
    %74 = llvm.zext %70 : i9 to i10
    %75 = llvm.or %73, %74  : i10
    %76 = llvm.mlir.constant(10 : i11) : i11
    %77 = llvm.zext %45 : i1 to i11
    %78 = llvm.shl %77, %76  : i11
    %79 = llvm.zext %75 : i10 to i11
    %80 = llvm.or %78, %79  : i11
    %81 = llvm.mlir.constant(11 : i12) : i12
    %82 = llvm.zext %45 : i1 to i12
    %83 = llvm.shl %82, %81  : i12
    %84 = llvm.zext %80 : i11 to i12
    %85 = llvm.or %83, %84  : i12
    %86 = llvm.mlir.constant(12 : i13) : i13
    %87 = llvm.zext %45 : i1 to i13
    %88 = llvm.shl %87, %86  : i13
    %89 = llvm.zext %85 : i12 to i13
    %90 = llvm.or %88, %89  : i13
    %91 = llvm.mlir.constant(13 : i14) : i14
    %92 = llvm.zext %45 : i1 to i14
    %93 = llvm.shl %92, %91  : i14
    %94 = llvm.zext %90 : i13 to i14
    %95 = llvm.or %93, %94  : i14
    %96 = llvm.mlir.constant(14 : i15) : i15
    %97 = llvm.zext %45 : i1 to i15
    %98 = llvm.shl %97, %96  : i15
    %99 = llvm.zext %95 : i14 to i15
    %100 = llvm.or %98, %99  : i15
    %101 = llvm.mlir.constant(15 : i16) : i16
    %102 = llvm.zext %45 : i1 to i16
    %103 = llvm.shl %102, %101  : i16
    %104 = llvm.zext %100 : i15 to i16
    %105 = llvm.or %103, %104  : i16
    %106 = llvm.mlir.constant(true) : i1
    %107 = llvm.xor %29, %106  : i1
    %108 = llvm.mlir.constant(3 : i4) : i4
    %109 = llvm.zext %107 : i1 to i4
    %110 = llvm.shl %109, %108  : i4
    %111 = llvm.zext %20 : i3 to i4
    %112 = llvm.or %110, %111  : i4
    %113 = llvm.mlir.constant(4 : i5) : i5
    %114 = llvm.zext %29 : i1 to i5
    %115 = llvm.shl %114, %113  : i5
    %116 = llvm.zext %112 : i4 to i5
    %117 = llvm.or %115, %116  : i5
    %118 = llvm.mlir.constant(5 : i6) : i6
    %119 = llvm.zext %29 : i1 to i6
    %120 = llvm.shl %119, %118  : i6
    %121 = llvm.zext %117 : i5 to i6
    %122 = llvm.or %120, %121  : i6
    %123 = llvm.mlir.constant(6 : i7) : i7
    %124 = llvm.zext %29 : i1 to i7
    %125 = llvm.shl %124, %123  : i7
    %126 = llvm.zext %122 : i6 to i7
    %127 = llvm.or %125, %126  : i7
    %128 = llvm.mlir.constant(7 : i8) : i8
    %129 = llvm.zext %29 : i1 to i8
    %130 = llvm.shl %129, %128  : i8
    %131 = llvm.zext %127 : i7 to i8
    %132 = llvm.or %130, %131  : i8
    %133 = llvm.mlir.constant(8 : i9) : i9
    %134 = llvm.zext %29 : i1 to i9
    %135 = llvm.shl %134, %133  : i9
    %136 = llvm.zext %132 : i8 to i9
    %137 = llvm.or %135, %136  : i9
    %138 = llvm.mlir.constant(9 : i10) : i10
    %139 = llvm.zext %107 : i1 to i10
    %140 = llvm.shl %139, %138  : i10
    %141 = llvm.zext %137 : i9 to i10
    %142 = llvm.or %140, %141  : i10
    %143 = llvm.mlir.constant(10 : i11) : i11
    %144 = llvm.zext %107 : i1 to i11
    %145 = llvm.shl %144, %143  : i11
    %146 = llvm.zext %142 : i10 to i11
    %147 = llvm.or %145, %146  : i11
    %148 = llvm.mlir.constant(11 : i12) : i12
    %149 = llvm.zext %107 : i1 to i12
    %150 = llvm.shl %149, %148  : i12
    %151 = llvm.zext %147 : i11 to i12
    %152 = llvm.or %150, %151  : i12
    %153 = llvm.mlir.constant(12 : i13) : i13
    %154 = llvm.zext %107 : i1 to i13
    %155 = llvm.shl %154, %153  : i13
    %156 = llvm.zext %152 : i12 to i13
    %157 = llvm.or %155, %156  : i13
    %158 = llvm.mlir.constant(13 : i14) : i14
    %159 = llvm.zext %107 : i1 to i14
    %160 = llvm.shl %159, %158  : i14
    %161 = llvm.zext %157 : i13 to i14
    %162 = llvm.or %160, %161  : i14
    %163 = llvm.mlir.constant(14 : i15) : i15
    %164 = llvm.zext %107 : i1 to i15
    %165 = llvm.shl %164, %163  : i15
    %166 = llvm.zext %162 : i14 to i15
    %167 = llvm.or %165, %166  : i15
    %168 = llvm.mlir.constant(15 : i16) : i16
    %169 = llvm.zext %107 : i1 to i16
    %170 = llvm.shl %169, %168  : i16
    %171 = llvm.zext %167 : i15 to i16
    %172 = llvm.or %170, %171  : i16
    %173 = llvm.add %172, %105  : i16
    %174 = llvm.add %173, %38  : i16
    %175 = llvm.mlir.constant(15 : i16) : i16
    %176 = llvm.lshr %174, %175  : i16
    %177 = llvm.trunc %176 : i16 to i1
    %178 = llvm.mlir.constant(16 : i17) : i17
    %179 = llvm.zext %177 : i1 to i17
    %180 = llvm.shl %179, %178  : i17
    %181 = llvm.zext %174 : i16 to i17
    %182 = llvm.or %180, %181  : i17
    %183 = llvm.mlir.constant(15 : i16) : i16
    %184 = llvm.lshr %174, %183  : i16
    %185 = llvm.trunc %184 : i16 to i1
    %186 = llvm.mlir.constant(17 : i18) : i18
    %187 = llvm.zext %185 : i1 to i18
    %188 = llvm.shl %187, %186  : i18
    %189 = llvm.zext %182 : i17 to i18
    %190 = llvm.or %188, %189  : i18
    %191 = llvm.mlir.constant(15 : i16) : i16
    %192 = llvm.lshr %174, %191  : i16
    %193 = llvm.trunc %192 : i16 to i1
    %194 = llvm.mlir.constant(18 : i19) : i19
    %195 = llvm.zext %193 : i1 to i19
    %196 = llvm.shl %195, %194  : i19
    %197 = llvm.zext %190 : i18 to i19
    %198 = llvm.or %196, %197  : i19
    %199 = llvm.mlir.constant(15 : i16) : i16
    %200 = llvm.lshr %174, %199  : i16
    %201 = llvm.trunc %200 : i16 to i1
    %202 = llvm.mlir.constant(19 : i20) : i20
    %203 = llvm.zext %201 : i1 to i20
    %204 = llvm.shl %203, %202  : i20
    %205 = llvm.zext %198 : i19 to i20
    %206 = llvm.or %204, %205  : i20
    %207 = llvm.mlir.constant(15 : i16) : i16
    %208 = llvm.lshr %174, %207  : i16
    %209 = llvm.trunc %208 : i16 to i1
    %210 = llvm.mlir.constant(20 : i21) : i21
    %211 = llvm.zext %209 : i1 to i21
    %212 = llvm.shl %211, %210  : i21
    %213 = llvm.zext %206 : i20 to i21
    %214 = llvm.or %212, %213  : i21
    %215 = llvm.mlir.constant(15 : i16) : i16
    %216 = llvm.lshr %174, %215  : i16
    %217 = llvm.trunc %216 : i16 to i1
    %218 = llvm.mlir.constant(21 : i22) : i22
    %219 = llvm.zext %217 : i1 to i22
    %220 = llvm.shl %219, %218  : i22
    %221 = llvm.zext %214 : i21 to i22
    %222 = llvm.or %220, %221  : i22
    %223 = llvm.mlir.constant(15 : i16) : i16
    %224 = llvm.lshr %174, %223  : i16
    %225 = llvm.trunc %224 : i16 to i1
    %226 = llvm.mlir.constant(22 : i23) : i23
    %227 = llvm.zext %225 : i1 to i23
    %228 = llvm.shl %227, %226  : i23
    %229 = llvm.zext %222 : i22 to i23
    %230 = llvm.or %228, %229  : i23
    %231 = llvm.mlir.constant(15 : i16) : i16
    %232 = llvm.lshr %174, %231  : i16
    %233 = llvm.trunc %232 : i16 to i1
    %234 = llvm.mlir.constant(23 : i24) : i24
    %235 = llvm.zext %233 : i1 to i24
    %236 = llvm.shl %235, %234  : i24
    %237 = llvm.zext %230 : i23 to i24
    %238 = llvm.or %236, %237  : i24
    %239 = llvm.mlir.constant(15 : i16) : i16
    %240 = llvm.lshr %174, %239  : i16
    %241 = llvm.trunc %240 : i16 to i1
    %242 = llvm.mlir.constant(24 : i25) : i25
    %243 = llvm.zext %241 : i1 to i25
    %244 = llvm.shl %243, %242  : i25
    %245 = llvm.zext %238 : i24 to i25
    %246 = llvm.or %244, %245  : i25
    %247 = llvm.mlir.constant(15 : i16) : i16
    %248 = llvm.lshr %174, %247  : i16
    %249 = llvm.trunc %248 : i16 to i1
    %250 = llvm.mlir.constant(25 : i26) : i26
    %251 = llvm.zext %249 : i1 to i26
    %252 = llvm.shl %251, %250  : i26
    %253 = llvm.zext %246 : i25 to i26
    %254 = llvm.or %252, %253  : i26
    %255 = llvm.mlir.constant(15 : i16) : i16
    %256 = llvm.lshr %174, %255  : i16
    %257 = llvm.trunc %256 : i16 to i1
    %258 = llvm.mlir.constant(26 : i27) : i27
    %259 = llvm.zext %257 : i1 to i27
    %260 = llvm.shl %259, %258  : i27
    %261 = llvm.zext %254 : i26 to i27
    %262 = llvm.or %260, %261  : i27
    %263 = llvm.mlir.constant(15 : i16) : i16
    %264 = llvm.lshr %174, %263  : i16
    %265 = llvm.trunc %264 : i16 to i1
    %266 = llvm.mlir.constant(27 : i28) : i28
    %267 = llvm.zext %265 : i1 to i28
    %268 = llvm.shl %267, %266  : i28
    %269 = llvm.zext %262 : i27 to i28
    %270 = llvm.or %268, %269  : i28
    %271 = llvm.mlir.constant(15 : i16) : i16
    %272 = llvm.lshr %174, %271  : i16
    %273 = llvm.trunc %272 : i16 to i1
    %274 = llvm.mlir.constant(28 : i29) : i29
    %275 = llvm.zext %273 : i1 to i29
    %276 = llvm.shl %275, %274  : i29
    %277 = llvm.zext %270 : i28 to i29
    %278 = llvm.or %276, %277  : i29
    %279 = llvm.mlir.constant(15 : i16) : i16
    %280 = llvm.lshr %174, %279  : i16
    %281 = llvm.trunc %280 : i16 to i1
    %282 = llvm.mlir.constant(29 : i30) : i30
    %283 = llvm.zext %281 : i1 to i30
    %284 = llvm.shl %283, %282  : i30
    %285 = llvm.zext %278 : i29 to i30
    %286 = llvm.or %284, %285  : i30
    %287 = llvm.mlir.constant(15 : i16) : i16
    %288 = llvm.lshr %174, %287  : i16
    %289 = llvm.trunc %288 : i16 to i1
    %290 = llvm.mlir.constant(30 : i31) : i31
    %291 = llvm.zext %289 : i1 to i31
    %292 = llvm.shl %291, %290  : i31
    %293 = llvm.zext %286 : i30 to i31
    %294 = llvm.or %292, %293  : i31
    %295 = llvm.zext %294 : i31 to i32
    %296 = llvm.mlir.constant(0 : i31) : i31
    %297 = llvm.mlir.constant(15 : i16) : i16
    %298 = llvm.lshr %174, %297  : i16
    %299 = llvm.trunc %298 : i16 to i1
    %300 = llvm.mlir.constant(31 : i32) : i32
    %301 = llvm.zext %299 : i1 to i32
    %302 = llvm.shl %301, %300  : i32
    %303 = llvm.zext %296 : i31 to i32
    %304 = llvm.or %302, %303  : i32
    %305 = llvm.icmp "ule" %304, %295 : i32
    %306 = llvm.select %305, %16, %30 : i1, i1
    %307 = llvm.select %306, %35, %15 : i1, i16
    %308 = llvm.add %173, %307  : i16
    %309 = llvm.mlir.constant(0 : i16) : i16
    %310 = llvm.sub %309, %308  : i16
    %311 = llvm.select %11, %308, %310 : i1, i16
    %312 = llvm.sext %311 : i16 to i18
    %313 = llvm.mlir.constant(1 : i2) : i2
    %314 = llvm.sext %313 : i2 to i18
    %315 = llvm.mul %314, %312  : i18
    %316 = llvm.mlir.constant(17 : i18) : i18
    %317 = llvm.lshr %315, %316  : i18
    %318 = llvm.trunc %317 : i18 to i1
    %319 = llvm.mlir.constant(18 : i19) : i19
    %320 = llvm.zext %318 : i1 to i19
    %321 = llvm.shl %320, %319  : i19
    %322 = llvm.zext %315 : i18 to i19
    %323 = llvm.or %321, %322  : i19
    %324 = llvm.mlir.constant(17 : i18) : i18
    %325 = llvm.lshr %315, %324  : i18
    %326 = llvm.trunc %325 : i18 to i1
    %327 = llvm.mlir.constant(19 : i20) : i20
    %328 = llvm.zext %326 : i1 to i20
    %329 = llvm.shl %328, %327  : i20
    %330 = llvm.zext %323 : i19 to i20
    %331 = llvm.or %329, %330  : i20
    %332 = llvm.mlir.constant(17 : i18) : i18
    %333 = llvm.lshr %315, %332  : i18
    %334 = llvm.trunc %333 : i18 to i1
    %335 = llvm.mlir.constant(20 : i21) : i21
    %336 = llvm.zext %334 : i1 to i21
    %337 = llvm.shl %336, %335  : i21
    %338 = llvm.zext %331 : i20 to i21
    %339 = llvm.or %337, %338  : i21
    %340 = llvm.mlir.constant(17 : i18) : i18
    %341 = llvm.lshr %315, %340  : i18
    %342 = llvm.trunc %341 : i18 to i1
    %343 = llvm.mlir.constant(21 : i22) : i22
    %344 = llvm.zext %342 : i1 to i22
    %345 = llvm.shl %344, %343  : i22
    %346 = llvm.zext %339 : i21 to i22
    %347 = llvm.or %345, %346  : i22
    %348 = llvm.mlir.constant(17 : i18) : i18
    %349 = llvm.lshr %315, %348  : i18
    %350 = llvm.trunc %349 : i18 to i1
    %351 = llvm.mlir.constant(22 : i23) : i23
    %352 = llvm.zext %350 : i1 to i23
    %353 = llvm.shl %352, %351  : i23
    %354 = llvm.zext %347 : i22 to i23
    %355 = llvm.or %353, %354  : i23
    %356 = llvm.sext %10 : i16 to i23
    %357 = llvm.mlir.constant(127 : i8) : i8
    %358 = llvm.sext %357 : i8 to i23
    %359 = llvm.mul %358, %356  : i23
    %360 = llvm.add %359, %355  : i23
    %361 = llvm.add %360, %33  : i23
    %362 = llvm.mlir.constant(7 : i23) : i23
    %363 = llvm.lshr %361, %362  : i23
    %364 = llvm.trunc %363 : i23 to i16
    %365 = llvm.mlir.constant(1 : i16) : i16
    %366 = llvm.select %27, %365, %364 : i1, i16
    %367 = llvm.select %27, %30, %306 : i1, i1
    %368 = llvm.zext %16 : i1 to i16
    %369 = llvm.add %12, %368  : i16
    %370 = llvm.zext %29 : i1 to i4
    %371 = llvm.add %13, %370  : i4
    %372 = llvm.mlir.constant(0 : i3) : i3
    %373 = llvm.mlir.constant(1 : i4) : i4
    %374 = llvm.zext %372 : i3 to i4
    %375 = llvm.shl %374, %373  : i4
    %376 = llvm.zext %29 : i1 to i4
    %377 = llvm.or %375, %376  : i4
    %378 = llvm.select %25, %377, %371 : i1, i4
    %379 = llvm.mlir.constant(0 : i4) : i4
    %380 = llvm.select %27, %379, %378 : i1, i4
    %381 = llvm.zext %16 : i1 to i4
    %382 = llvm.add %14, %381  : i4
    %383 = llvm.select %25, %379, %382 : i1, i4
    %384 = llvm.select %27, %379, %383 : i1, i4
    %385 = llvm.zext %32 : i7 to i23
    %386 = llvm.mlir.constant(0 : i16) : i16
    %387 = llvm.sub %386, %174  : i16
    %388 = llvm.select %306, %174, %387 : i1, i16
    %389 = llvm.sext %388 : i16 to i18
    %390 = llvm.sext %313 : i2 to i18
    %391 = llvm.mul %390, %389  : i18
    %392 = llvm.mlir.constant(17 : i18) : i18
    %393 = llvm.lshr %391, %392  : i18
    %394 = llvm.trunc %393 : i18 to i1
    %395 = llvm.mlir.constant(18 : i19) : i19
    %396 = llvm.zext %394 : i1 to i19
    %397 = llvm.shl %396, %395  : i19
    %398 = llvm.zext %391 : i18 to i19
    %399 = llvm.or %397, %398  : i19
    %400 = llvm.mlir.constant(17 : i18) : i18
    %401 = llvm.lshr %391, %400  : i18
    %402 = llvm.trunc %401 : i18 to i1
    %403 = llvm.mlir.constant(19 : i20) : i20
    %404 = llvm.zext %402 : i1 to i20
    %405 = llvm.shl %404, %403  : i20
    %406 = llvm.zext %399 : i19 to i20
    %407 = llvm.or %405, %406  : i20
    %408 = llvm.mlir.constant(17 : i18) : i18
    %409 = llvm.lshr %391, %408  : i18
    %410 = llvm.trunc %409 : i18 to i1
    %411 = llvm.mlir.constant(20 : i21) : i21
    %412 = llvm.zext %410 : i1 to i21
    %413 = llvm.shl %412, %411  : i21
    %414 = llvm.zext %407 : i20 to i21
    %415 = llvm.or %413, %414  : i21
    %416 = llvm.mlir.constant(17 : i18) : i18
    %417 = llvm.lshr %391, %416  : i18
    %418 = llvm.trunc %417 : i18 to i1
    %419 = llvm.mlir.constant(21 : i22) : i22
    %420 = llvm.zext %418 : i1 to i22
    %421 = llvm.shl %420, %419  : i22
    %422 = llvm.zext %415 : i21 to i22
    %423 = llvm.or %421, %422  : i22
    %424 = llvm.mlir.constant(17 : i18) : i18
    %425 = llvm.lshr %391, %424  : i18
    %426 = llvm.trunc %425 : i18 to i1
    %427 = llvm.mlir.constant(22 : i23) : i23
    %428 = llvm.zext %426 : i1 to i23
    %429 = llvm.shl %428, %427  : i23
    %430 = llvm.zext %423 : i22 to i23
    %431 = llvm.or %429, %430  : i23
    %432 = llvm.sext %15 : i16 to i23
    %433 = llvm.sext %357 : i8 to i23
    %434 = llvm.mul %433, %432  : i23
    %435 = llvm.add %434, %431  : i23
    %436 = llvm.add %435, %385  : i23
    %437 = llvm.mlir.constant(7 : i23) : i23
    %438 = llvm.lshr %436, %437  : i23
    %439 = llvm.trunc %438 : i23 to i16
    %440 = llvm.select %27, %365, %439 : i1, i16
    %441 = llvm.mlir.constant(true) : i1
    %442 = llvm.xor %8, %441  : i1
    %443 = llvm.mlir.constant(true) : i1
    %444 = llvm.xor %442, %443  : i1
    %445 = llvm.or %8, %444  : i1
    llvm.call @verifier.assume(%445) : (i1) -> ()
    %446 = llvm.zext %16 : i1 to i16
    %447 = llvm.icmp "ule" %12, %446 : i16
    %448 = llvm.xor %27, %447  : i1
    %449 = llvm.mlir.constant(true) : i1
    %450 = llvm.xor %448, %449  : i1
    %451 = llvm.mlir.constant(true) : i1
    %452 = llvm.xor %448, %451  : i1
    %453 = llvm.or %452, %450  : i1
    llvm.call @verifier.assume(%453) : (i1) -> ()
    %454 = llvm.xor %29, %306  : i1
    %455 = llvm.mlir.constant(true) : i1
    %456 = llvm.xor %454, %455  : i1
    %457 = llvm.mlir.constant(-3 : i3) : i3
    %458 = llvm.zext %457 : i3 to i16
    %459 = llvm.icmp "ult" %458, %12 : i16
    %460 = llvm.select %459, %456, %16 : i1, i1
    %461 = llvm.mlir.constant(true) : i1
    %462 = llvm.xor %460, %461  : i1
    %463 = llvm.mlir.constant(true) : i1
    %464 = llvm.xor %460, %463  : i1
    %465 = llvm.and %464, %462  : i1
    %466 = llvm.mlir.constant(true) : i1
    %467 = llvm.xor %465, %466  : i1
    llvm.cond_br %467, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%28, %31, %366, %367, %369, %380, %384, %440 : i1, i1, i16, i1, i16, i4, i4, i16)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

