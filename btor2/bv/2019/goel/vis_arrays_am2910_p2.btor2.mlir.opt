module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @nd_bv12() -> i12
  llvm.func @nd_bv1() -> i1
  llvm.func @nd_bv4() -> i4
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i3) : i3
    %2 = llvm.mlir.constant(0 : i12) : i12
    llvm.br ^bb1(%0, %1, %1, %2 : i1, i3, i3, i12)
  ^bb1(%3: i1, %4: i3, %5: i3, %6: i12):  // 2 preds: ^bb0, ^bb2
    %7 = llvm.mlir.constant(true) : i1
    %8 = llvm.mlir.constant(0 : i3) : i3
    %9 = llvm.mlir.constant(0 : i4) : i4
    %10 = llvm.call @nd_bv4() : () -> i4
    %11 = llvm.icmp "eq" %10, %9 : i4
    %12 = llvm.select %11, %8, %5 : i1, i3
    %13 = llvm.mlir.constant(1 : i3) : i3
    %14 = llvm.add %5, %13  : i3
    %15 = llvm.mlir.constant(-3 : i3) : i3
    %16 = llvm.icmp "ne" %5, %15 : i3
    %17 = llvm.mlir.constant(5 : i4) : i4
    %18 = llvm.icmp "eq" %10, %17 : i4
    %19 = llvm.mlir.constant(4 : i4) : i4
    %20 = llvm.icmp "eq" %10, %19 : i4
    %21 = llvm.mlir.constant(1 : i4) : i4
    %22 = llvm.icmp "eq" %10, %21 : i4
    %23 = llvm.call @nd_bv1() : () -> i1
    %24 = llvm.mlir.constant(true) : i1
    %25 = llvm.xor %23, %24  : i1
    %26 = llvm.call @nd_bv1() : () -> i1
    %27 = llvm.and %26, %25  : i1
    %28 = llvm.mlir.constant(true) : i1
    %29 = llvm.xor %27, %28  : i1
    %30 = llvm.and %29, %22  : i1
    %31 = llvm.or %30, %20  : i1
    %32 = llvm.or %31, %18  : i1
    %33 = llvm.and %32, %16  : i1
    %34 = llvm.select %33, %14, %12 : i1, i3
    %35 = llvm.sub %5, %13  : i3
    %36 = llvm.icmp "ne" %5, %8 : i3
    %37 = llvm.mlir.constant(-1 : i4) : i4
    %38 = llvm.icmp "eq" %10, %37 : i4
    %39 = llvm.mlir.constant(-8 : i4) : i4
    %40 = llvm.icmp "eq" %10, %39 : i4
    %41 = llvm.or %40, %38  : i1
    %42 = llvm.bitcast %6 : i12 to vector<12xi1>
    %43 = "llvm.intr.vector.reduce.or"(%42) : (vector<12xi1>) -> i1
    %44 = llvm.mlir.constant(true) : i1
    %45 = llvm.xor %43, %44  : i1
    %46 = llvm.and %45, %41  : i1
    %47 = llvm.icmp "eq" %10, %37 : i4
    %48 = llvm.mlir.constant(-3 : i4) : i4
    %49 = llvm.icmp "eq" %10, %48 : i4
    %50 = llvm.mlir.constant(-5 : i4) : i4
    %51 = llvm.icmp "eq" %10, %50 : i4
    %52 = llvm.mlir.constant(-6 : i4) : i4
    %53 = llvm.icmp "eq" %10, %52 : i4
    %54 = llvm.or %53, %51  : i1
    %55 = llvm.or %54, %49  : i1
    %56 = llvm.or %55, %47  : i1
    %57 = llvm.mlir.constant(true) : i1
    %58 = llvm.xor %27, %57  : i1
    %59 = llvm.and %58, %56  : i1
    %60 = llvm.or %59, %46  : i1
    %61 = llvm.and %60, %36  : i1
    %62 = llvm.select %61, %35, %34 : i1, i3
    %63 = llvm.mlir.constant(1 : i12) : i12
    %64 = llvm.sub %6, %63  : i12
    %65 = llvm.call @nd_bv1() : () -> i1
    %66 = llvm.icmp "eq" %10, %37 : i4
    %67 = llvm.mlir.constant(-7 : i4) : i4
    %68 = llvm.icmp "eq" %10, %67 : i4
    %69 = llvm.icmp "eq" %10, %39 : i4
    %70 = llvm.or %69, %68  : i1
    %71 = llvm.or %70, %66  : i1
    %72 = llvm.and %43, %71  : i1
    %73 = llvm.and %72, %65  : i1
    %74 = llvm.select %73, %64, %6 : i1, i12
    %75 = llvm.call @nd_bv12() : () -> i12
    %76 = llvm.mlir.constant(true) : i1
    %77 = llvm.xor %65, %76  : i1
    %78 = llvm.icmp "eq" %10, %19 : i4
    %79 = llvm.mlir.constant(true) : i1
    %80 = llvm.xor %27, %79  : i1
    %81 = llvm.and %80, %78  : i1
    %82 = llvm.mlir.constant(-4 : i4) : i4
    %83 = llvm.icmp "eq" %10, %82 : i4
    %84 = llvm.or %83, %81  : i1
    %85 = llvm.or %84, %77  : i1
    %86 = llvm.select %85, %75, %74 : i1, i12
    %87 = llvm.mlir.constant(-1 : i3) : i3
    %88 = llvm.icmp "eq" %5, %87 : i3
    %89 = llvm.mlir.constant(-2 : i3) : i3
    %90 = llvm.icmp "ne" %4, %89 : i3
    %91 = llvm.mlir.constant(false) : i1
    %92 = llvm.icmp "eq" %3, %91 : i1
    %93 = llvm.or %92, %90  : i1
    %94 = llvm.or %93, %88  : i1
    %95 = llvm.mlir.constant(true) : i1
    %96 = llvm.xor %94, %95  : i1
    %97 = llvm.and %7, %96  : i1
    %98 = llvm.mlir.constant(true) : i1
    %99 = llvm.xor %97, %98  : i1
    llvm.cond_br %99, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%7, %5, %62, %86 : i1, i3, i3, i12)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

