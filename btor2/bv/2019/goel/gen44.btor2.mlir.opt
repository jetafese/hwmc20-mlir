module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @nd_bv3() -> i3
  llvm.func @nd_bv13() -> i13
  llvm.func @nd_bv1() -> i1
  llvm.func @nd_bv256() -> i256
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.call @nd_bv256() : () -> i256
    %2 = llvm.call @nd_bv256() : () -> i256
    %3 = llvm.call @nd_bv1() : () -> i1
    %4 = llvm.call @nd_bv1() : () -> i1
    llvm.br ^bb1(%1, %2, %0, %3, %0, %0, %0, %4 : i256, i256, i1, i1, i1, i1, i1, i1)
  ^bb1(%5: i256, %6: i256, %7: i1, %8: i1, %9: i1, %10: i1, %11: i1, %12: i1):  // 2 preds: ^bb0, ^bb2
    %13 = llvm.call @nd_bv13() : () -> i13
    %14 = llvm.mlir.constant(12 : i13) : i13
    %15 = llvm.lshr %13, %14  : i13
    %16 = llvm.trunc %15 : i13 to i1
    %17 = llvm.mlir.constant(11 : i13) : i13
    %18 = llvm.lshr %13, %17  : i13
    %19 = llvm.trunc %18 : i13 to i1
    %20 = llvm.or %19, %16  : i1
    %21 = llvm.select %20, %6, %5 : i1, i256
    %22 = llvm.mlir.constant(0 : i256) : i256
    %23 = llvm.call @nd_bv1() : () -> i1
    %24 = llvm.select %23, %22, %21 : i1, i256
    %25 = llvm.call @nd_bv1() : () -> i1
    %26 = llvm.select %25, %24, %5 : i1, i256
    %27 = llvm.mlir.constant(false) : i1
    %28 = llvm.select %27, %22, %26 : i1, i256
    %29 = llvm.call @nd_bv256() : () -> i256
    %30 = llvm.mlir.constant(true) : i1
    %31 = llvm.xor %25, %30  : i1
    %32 = llvm.icmp "eq" %23, %8 : i1
    %33 = llvm.mlir.constant(true) : i1
    %34 = llvm.xor %23, %33  : i1
    %35 = llvm.and %34, %32  : i1
    %36 = llvm.and %11, %35  : i1
    %37 = llvm.and %36, %10  : i1
    %38 = llvm.mlir.constant(10 : i13) : i13
    %39 = llvm.lshr %13, %38  : i13
    %40 = llvm.trunc %39 : i13 to i1
    %41 = llvm.or %40, %19  : i1
    %42 = llvm.or %23, %41  : i1
    %43 = llvm.mlir.constant(true) : i1
    %44 = llvm.xor %42, %43  : i1
    %45 = llvm.or %44, %37  : i1
    %46 = llvm.or %45, %31  : i1
    %47 = llvm.select %46, %6, %29 : i1, i256
    %48 = llvm.select %27, %22, %47 : i1, i256
    %49 = llvm.select %25, %45, %7 : i1, i1
    %50 = llvm.select %27, %27, %49 : i1, i1
    %51 = llvm.select %25, %23, %8 : i1, i1
    %52 = llvm.select %27, %27, %51 : i1, i1
    %53 = llvm.or %23, %20  : i1
    %54 = llvm.and %7, %35  : i1
    %55 = llvm.and %54, %9  : i1
    %56 = llvm.mlir.constant(true) : i1
    %57 = llvm.xor %55, %56  : i1
    %58 = llvm.select %57, %53, %9 : i1, i1
    %59 = llvm.select %25, %58, %9 : i1, i1
    %60 = llvm.select %27, %27, %59 : i1, i1
    %61 = llvm.mlir.constant(true) : i1
    %62 = llvm.xor %37, %61  : i1
    %63 = llvm.select %62, %42, %10 : i1, i1
    %64 = llvm.select %25, %63, %10 : i1, i1
    %65 = llvm.select %27, %27, %64 : i1, i1
    %66 = llvm.call @nd_bv1() : () -> i1
    %67 = llvm.mlir.constant(true) : i1
    %68 = llvm.xor %66, %67  : i1
    %69 = llvm.mlir.constant(-3 : i3) : i3
    %70 = llvm.call @nd_bv3() : () -> i3
    %71 = llvm.icmp "eq" %70, %69 : i3
    %72 = llvm.and %12, %71  : i1
    %73 = llvm.and %72, %68  : i1
    %74 = llvm.call @nd_bv1() : () -> i1
    %75 = llvm.mlir.constant(9 : i13) : i13
    %76 = llvm.lshr %13, %75  : i13
    %77 = llvm.trunc %76 : i13 to i1
    %78 = llvm.and %77, %74  : i1
    %79 = llvm.mlir.constant(8 : i13) : i13
    %80 = llvm.lshr %13, %79  : i13
    %81 = llvm.trunc %80 : i13 to i1
    %82 = llvm.or %23, %81  : i1
    %83 = llvm.or %82, %78  : i1
    %84 = llvm.or %83, %73  : i1
    %85 = llvm.mlir.constant(true) : i1
    %86 = llvm.xor %81, %85  : i1
    %87 = llvm.or %23, %86  : i1
    %88 = llvm.or %87, %77  : i1
    %89 = llvm.and %88, %84  : i1
    %90 = llvm.mlir.constant(true) : i1
    %91 = llvm.xor %89, %90  : i1
    %92 = llvm.select %25, %91, %11 : i1, i1
    %93 = llvm.select %27, %27, %92 : i1, i1
    %94 = llvm.call @nd_bv1() : () -> i1
    %95 = llvm.mlir.constant(1 : i3) : i3
    %96 = llvm.call @nd_bv3() : () -> i3
    %97 = llvm.icmp "eq" %96, %95 : i3
    %98 = llvm.select %97, %27, %27 : i1, i1
    %99 = llvm.mlir.constant(3 : i3) : i3
    %100 = llvm.icmp "eq" %96, %99 : i3
    %101 = llvm.select %100, %27, %27 : i1, i1
    %102 = llvm.mlir.constant(2 : i3) : i3
    %103 = llvm.icmp "eq" %96, %102 : i3
    %104 = llvm.or %103, %100  : i1
    %105 = llvm.select %104, %101, %98 : i1, i1
    %106 = llvm.mlir.constant(true) : i1
    %107 = llvm.icmp "eq" %96, %69 : i3
    %108 = llvm.select %107, %106, %27 : i1, i1
    %109 = llvm.mlir.constant(-1 : i3) : i3
    %110 = llvm.icmp "eq" %96, %109 : i3
    %111 = llvm.select %110, %27, %27 : i1, i1
    %112 = llvm.mlir.constant(-2 : i3) : i3
    %113 = llvm.icmp "eq" %96, %112 : i3
    %114 = llvm.or %113, %110  : i1
    %115 = llvm.select %114, %111, %108 : i1, i1
    %116 = llvm.mlir.constant(-4 : i3) : i3
    %117 = llvm.icmp "eq" %96, %116 : i3
    %118 = llvm.mlir.constant(1 : i2) : i2
    %119 = llvm.zext %107 : i1 to i2
    %120 = llvm.shl %119, %118  : i2
    %121 = llvm.zext %117 : i1 to i2
    %122 = llvm.or %120, %121  : i2
    %123 = llvm.mlir.constant(2 : i3) : i3
    %124 = llvm.zext %114 : i1 to i3
    %125 = llvm.shl %124, %123  : i3
    %126 = llvm.zext %122 : i2 to i3
    %127 = llvm.or %125, %126  : i3
    %128 = llvm.bitcast %127 : i3 to vector<3xi1>
    %129 = "llvm.intr.vector.reduce.or"(%128) : (vector<3xi1>) -> i1
    %130 = llvm.select %129, %115, %105 : i1, i1
    %131 = llvm.icmp "eq" %70, %95 : i3
    %132 = llvm.select %131, %27, %130 : i1, i1
    %133 = llvm.icmp "eq" %70, %99 : i3
    %134 = llvm.select %133, %27, %27 : i1, i1
    %135 = llvm.icmp "eq" %70, %102 : i3
    %136 = llvm.or %135, %133  : i1
    %137 = llvm.select %136, %134, %132 : i1, i1
    %138 = llvm.icmp "eq" %70, %69 : i3
    %139 = llvm.select %138, %27, %27 : i1, i1
    %140 = llvm.icmp "eq" %70, %109 : i3
    %141 = llvm.select %140, %27, %27 : i1, i1
    %142 = llvm.icmp "eq" %70, %112 : i3
    %143 = llvm.or %142, %140  : i1
    %144 = llvm.select %143, %141, %139 : i1, i1
    %145 = llvm.icmp "eq" %70, %116 : i3
    %146 = llvm.mlir.constant(1 : i2) : i2
    %147 = llvm.zext %138 : i1 to i2
    %148 = llvm.shl %147, %146  : i2
    %149 = llvm.zext %145 : i1 to i2
    %150 = llvm.or %148, %149  : i2
    %151 = llvm.mlir.constant(2 : i3) : i3
    %152 = llvm.zext %143 : i1 to i3
    %153 = llvm.shl %152, %151  : i3
    %154 = llvm.zext %150 : i2 to i3
    %155 = llvm.or %153, %154  : i3
    %156 = llvm.bitcast %155 : i3 to vector<3xi1>
    %157 = "llvm.intr.vector.reduce.or"(%156) : (vector<3xi1>) -> i1
    %158 = llvm.select %157, %144, %137 : i1, i1
    %159 = llvm.or %23, %158  : i1
    %160 = llvm.mlir.constant(true) : i1
    %161 = llvm.xor %159, %160  : i1
    %162 = llvm.or %161, %31  : i1
    %163 = llvm.select %162, %12, %94 : i1, i1
    %164 = llvm.select %27, %27, %163 : i1, i1
    %165 = llvm.call @nd_bv1() : () -> i1
    %166 = llvm.or %165, %57  : i1
    %167 = llvm.and %20, %166  : i1
    %168 = llvm.select %167, %6, %5 : i1, i256
    %169 = llvm.select %166, %22, %5 : i1, i256
    %170 = llvm.select %23, %169, %168 : i1, i256
    %171 = llvm.select %25, %170, %5 : i1, i256
    %172 = llvm.icmp "eq" %26, %171 : i256
    %173 = llvm.mlir.constant(true) : i1
    %174 = llvm.xor %172, %173  : i1
    %175 = llvm.and %106, %174  : i1
    %176 = llvm.mlir.constant(true) : i1
    %177 = llvm.xor %175, %176  : i1
    llvm.cond_br %177, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%28, %48, %50, %52, %60, %65, %93, %164 : i256, i256, i1, i1, i1, i1, i1, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

