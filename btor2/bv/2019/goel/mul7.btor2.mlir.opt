module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @nd_bv16() -> i16
  llvm.func @nd_bv8() -> i8
  llvm.func @nd_bv128() -> i128
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i256) : i256
    %2 = llvm.mlir.constant(0 : i128) : i128
    %3 = llvm.mlir.constant(0 : i10) : i10
    %4 = llvm.mlir.constant(true) : i1
    llvm.br ^bb1(%0, %1, %1, %2, %2, %3, %4, %4, %2, %2 : i1, i256, i256, i128, i128, i10, i1, i1, i128, i128)
  ^bb1(%5: i1, %6: i256, %7: i256, %8: i128, %9: i128, %10: i10, %11: i1, %12: i1, %13: i128, %14: i128):  // 2 preds: ^bb0, ^bb2
    %15 = llvm.mlir.constant(true) : i1
    %16 = llvm.zext %9 : i128 to i256
    %17 = llvm.zext %8 : i128 to i256
    %18 = llvm.mul %17, %16  : i256
    %19 = llvm.mlir.constant(0 : i256) : i256
    %20 = llvm.mlir.constant(true) : i1
    %21 = llvm.xor %5, %20  : i1
    %22 = llvm.select %21, %19, %18 : i1, i256
    %23 = llvm.zext %14 : i128 to i256
    %24 = llvm.zext %13 : i128 to i256
    %25 = llvm.mul %24, %23  : i256
    %26 = llvm.mlir.constant(1 : i32) : i32
    %27 = llvm.zext %26 : i32 to i256
    %28 = llvm.add %25, %27  : i256
    %29 = llvm.mlir.constant(12245771 : i128) : i128
    %30 = llvm.call @nd_bv128() : () -> i128
    %31 = llvm.icmp "eq" %30, %29 : i128
    %32 = llvm.mlir.constant(-559038737 : i128) : i128
    %33 = llvm.call @nd_bv128() : () -> i128
    %34 = llvm.icmp "eq" %33, %32 : i128
    %35 = llvm.mlir.constant(1000 : i32) : i32
    %36 = llvm.zext %10 : i10 to i32
    %37 = llvm.icmp "ugt" %36, %35 : i32
    %38 = llvm.and %37, %34  : i1
    %39 = llvm.and %38, %31  : i1
    %40 = llvm.select %39, %28, %25 : i1, i256
    %41 = llvm.or %11, %12  : i1
    %42 = llvm.select %41, %40, %7 : i1, i256
    %43 = llvm.select %21, %19, %42 : i1, i256
    %44 = llvm.call @nd_bv8() : () -> i8
    %45 = llvm.trunc %44 : i8 to i1
    %46 = llvm.select %45, %33, %8 : i1, i128
    %47 = llvm.mlir.constant(0 : i128) : i128
    %48 = llvm.select %21, %47, %46 : i1, i128
    %49 = llvm.call @nd_bv8() : () -> i8
    %50 = llvm.trunc %49 : i8 to i1
    %51 = llvm.select %50, %30, %9 : i1, i128
    %52 = llvm.select %21, %47, %51 : i1, i128
    %53 = llvm.call @nd_bv16() : () -> i16
    %54 = llvm.trunc %53 : i16 to i10
    %55 = llvm.select %21, %54, %10 : i1, i10
    %56 = llvm.select %21, %15, %45 : i1, i1
    %57 = llvm.select %21, %15, %50 : i1, i1
    %58 = llvm.select %45, %33, %13 : i1, i128
    %59 = llvm.select %21, %47, %58 : i1, i128
    %60 = llvm.select %50, %30, %14 : i1, i128
    %61 = llvm.select %21, %47, %60 : i1, i128
    %62 = llvm.icmp "eq" %6, %7 : i256
    %63 = llvm.mlir.constant(true) : i1
    %64 = llvm.xor %5, %63  : i1
    %65 = llvm.or %64, %62  : i1
    %66 = llvm.mlir.constant(true) : i1
    %67 = llvm.xor %65, %66  : i1
    %68 = llvm.and %15, %67  : i1
    %69 = llvm.mlir.constant(true) : i1
    %70 = llvm.xor %68, %69  : i1
    llvm.cond_br %70, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%15, %22, %43, %48, %52, %55, %56, %57, %59, %61 : i1, i256, i256, i128, i128, i10, i1, i1, i128, i128)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

