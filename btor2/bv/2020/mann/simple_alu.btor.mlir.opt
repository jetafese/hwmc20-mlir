module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @nd_bv16() -> i16
  llvm.func @nd_bv1() -> i1
  llvm.func @nd_bv4() -> i4
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : i16) : i16
    %1 = llvm.mlir.constant(true) : i1
    %2 = llvm.call @nd_bv4() : () -> i4
    llvm.br ^bb1(%2, %0, %1 : i4, i16, i1)
  ^bb1(%3: i4, %4: i16, %5: i1):  // 2 preds: ^bb0, ^bb2
    %6 = llvm.mlir.constant(0 : i4) : i4
    %7 = llvm.select %5, %6, %3 : i1, i4
    %8 = llvm.mlir.constant(true) : i1
    %9 = llvm.zext %8 : i1 to i16
    %10 = llvm.add %4, %9  : i16
    %11 = llvm.mlir.constant(false) : i1
    %12 = llvm.call @nd_bv1() : () -> i1
    %13 = llvm.call @nd_bv16() : () -> i16
    %14 = llvm.call @nd_bv16() : () -> i16
    %15 = llvm.add %14, %13  : i16
    %16 = llvm.sub %14, %13  : i16
    %17 = llvm.bitcast %3 : i4 to vector<4xi1>
    %18 = "llvm.intr.vector.reduce.or"(%17) : (vector<4xi1>) -> i1
    %19 = llvm.mlir.constant(true) : i1
    %20 = llvm.xor %18, %19  : i1
    %21 = llvm.select %20, %15, %16 : i1, i16
    %22 = llvm.icmp "eq" %21, %15 : i16
    %23 = llvm.zext %11 : i1 to i16
    %24 = llvm.icmp "ugt" %4, %23 : i16
    %25 = llvm.select %24, %22, %12 : i1, i1
    %26 = llvm.mlir.constant(true) : i1
    %27 = llvm.xor %25, %26  : i1
    %28 = llvm.select %24, %8, %11 : i1, i1
    %29 = llvm.and %28, %27  : i1
    %30 = llvm.mlir.constant(true) : i1
    %31 = llvm.xor %29, %30  : i1
    llvm.cond_br %31, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%7, %10, %11 : i4, i16, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

