module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @nd_bv128() -> i128
  llvm.func @nd_bv4() -> i4
  llvm.func @nd_bv1() -> i1
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i1029) : i1029
    llvm.br ^bb1(%0, %0, %1, %1 : i1, i1, i1029, i1029)
  ^bb1(%2: i1, %3: i1, %4: i1029, %5: i1029):  // 2 preds: ^bb0, ^bb2
    %6 = llvm.mlir.constant(0 : i1029) : i1029
    %7 = llvm.lshr %4, %6  : i1029
    %8 = llvm.trunc %7 : i1029 to i4
    %9 = llvm.mlir.constant(0 : i1029) : i1029
    %10 = llvm.lshr %5, %9  : i1029
    %11 = llvm.trunc %10 : i1029 to i4
    %12 = llvm.icmp "eq" %11, %8 : i4
    %13 = llvm.mlir.constant(1028 : i1029) : i1029
    %14 = llvm.lshr %4, %13  : i1029
    %15 = llvm.trunc %14 : i1029 to i1
    %16 = llvm.mlir.constant(1028 : i1029) : i1029
    %17 = llvm.lshr %5, %16  : i1029
    %18 = llvm.trunc %17 : i1029 to i1
    %19 = llvm.xor %18, %15  : i1
    %20 = llvm.mlir.constant(true) : i1
    %21 = llvm.xor %19, %20  : i1
    %22 = llvm.and %21, %12  : i1
    %23 = llvm.mlir.constant(false) : i1
    %24 = llvm.call @nd_bv1() : () -> i1
    %25 = llvm.select %24, %23, %22 : i1, i1
    %26 = llvm.mlir.constant(true) : i1
    %27 = llvm.xor %22, %26  : i1
    %28 = llvm.select %24, %23, %27 : i1, i1
    %29 = llvm.mlir.constant(900 : i1029) : i1029
    %30 = llvm.lshr %4, %29  : i1029
    %31 = llvm.trunc %30 : i1029 to i128
    %32 = llvm.mlir.constant(900 : i1029) : i1029
    %33 = llvm.lshr %5, %32  : i1029
    %34 = llvm.trunc %33 : i1029 to i128
    %35 = llvm.mlir.constant(772 : i1029) : i1029
    %36 = llvm.lshr %4, %35  : i1029
    %37 = llvm.trunc %36 : i1029 to i128
    %38 = llvm.mlir.constant(772 : i1029) : i1029
    %39 = llvm.lshr %5, %38  : i1029
    %40 = llvm.trunc %39 : i1029 to i128
    %41 = llvm.mlir.constant(644 : i1029) : i1029
    %42 = llvm.lshr %4, %41  : i1029
    %43 = llvm.trunc %42 : i1029 to i128
    %44 = llvm.mlir.constant(644 : i1029) : i1029
    %45 = llvm.lshr %5, %44  : i1029
    %46 = llvm.trunc %45 : i1029 to i128
    %47 = llvm.mlir.constant(516 : i1029) : i1029
    %48 = llvm.lshr %4, %47  : i1029
    %49 = llvm.trunc %48 : i1029 to i128
    %50 = llvm.mlir.constant(516 : i1029) : i1029
    %51 = llvm.lshr %5, %50  : i1029
    %52 = llvm.trunc %51 : i1029 to i128
    %53 = llvm.mlir.constant(388 : i1029) : i1029
    %54 = llvm.lshr %4, %53  : i1029
    %55 = llvm.trunc %54 : i1029 to i128
    %56 = llvm.mlir.constant(388 : i1029) : i1029
    %57 = llvm.lshr %5, %56  : i1029
    %58 = llvm.trunc %57 : i1029 to i128
    %59 = llvm.mlir.constant(260 : i1029) : i1029
    %60 = llvm.lshr %4, %59  : i1029
    %61 = llvm.trunc %60 : i1029 to i128
    %62 = llvm.mlir.constant(260 : i1029) : i1029
    %63 = llvm.lshr %5, %62  : i1029
    %64 = llvm.trunc %63 : i1029 to i128
    %65 = llvm.mlir.constant(132 : i1029) : i1029
    %66 = llvm.lshr %4, %65  : i1029
    %67 = llvm.trunc %66 : i1029 to i128
    %68 = llvm.mlir.constant(132 : i1029) : i1029
    %69 = llvm.lshr %5, %68  : i1029
    %70 = llvm.trunc %69 : i1029 to i128
    %71 = llvm.mlir.constant(4 : i1029) : i1029
    %72 = llvm.lshr %4, %71  : i1029
    %73 = llvm.trunc %72 : i1029 to i128
    %74 = llvm.mlir.constant(4 : i1029) : i1029
    %75 = llvm.lshr %5, %74  : i1029
    %76 = llvm.trunc %75 : i1029 to i128
    %77 = llvm.mlir.constant(true) : i1
    %78 = llvm.call @nd_bv4() : () -> i4
    %79 = llvm.call @nd_bv128() : () -> i128
    %80 = llvm.mlir.constant(-8 : i4) : i4
    %81 = llvm.call @nd_bv1() : () -> i1
    %82 = llvm.mlir.constant(0 : i4) : i4
    %83 = llvm.call @nd_bv128() : () -> i128
    %84 = llvm.call @nd_bv128() : () -> i128
    %85 = llvm.call @nd_bv128() : () -> i128
    %86 = llvm.call @nd_bv128() : () -> i128
    %87 = llvm.call @nd_bv128() : () -> i128
    %88 = llvm.call @nd_bv128() : () -> i128
    %89 = llvm.call @nd_bv128() : () -> i128
    %90 = llvm.call @nd_bv128() : () -> i128
    %91 = llvm.zext %77 : i1 to i4
    %92 = llvm.add %8, %91  : i4
    %93 = llvm.call @nd_bv128() : () -> i128
    %94 = llvm.mlir.constant(3 : i1029) : i1029
    %95 = llvm.lshr %4, %94  : i1029
    %96 = llvm.trunc %95 : i1029 to i1
    %97 = llvm.mlir.constant(true) : i1
    %98 = llvm.xor %96, %97  : i1
    %99 = llvm.mlir.constant(0 : i1029) : i1029
    %100 = llvm.lshr %4, %99  : i1029
    %101 = llvm.trunc %100 : i1029 to i3
    %102 = llvm.zext %101 : i3 to i8
    %103 = llvm.zext %77 : i1 to i8
    %104 = llvm.shl %103, %102  : i8
    %105 = llvm.mlir.constant(0 : i8) : i8
    %106 = llvm.lshr %104, %105  : i8
    %107 = llvm.trunc %106 : i8 to i1
    %108 = llvm.and %107, %98  : i1
    %109 = llvm.select %108, %93, %73 : i1, i128
    %110 = llvm.mlir.constant(4 : i132) : i132
    %111 = llvm.zext %109 : i128 to i132
    %112 = llvm.shl %111, %110  : i132
    %113 = llvm.zext %92 : i4 to i132
    %114 = llvm.or %112, %113  : i132
    %115 = llvm.mlir.constant(1 : i8) : i8
    %116 = llvm.lshr %104, %115  : i8
    %117 = llvm.trunc %116 : i8 to i1
    %118 = llvm.and %117, %98  : i1
    %119 = llvm.select %118, %93, %67 : i1, i128
    %120 = llvm.mlir.constant(132 : i260) : i260
    %121 = llvm.zext %119 : i128 to i260
    %122 = llvm.shl %121, %120  : i260
    %123 = llvm.zext %114 : i132 to i260
    %124 = llvm.or %122, %123  : i260
    %125 = llvm.mlir.constant(2 : i8) : i8
    %126 = llvm.lshr %104, %125  : i8
    %127 = llvm.trunc %126 : i8 to i1
    %128 = llvm.and %127, %98  : i1
    %129 = llvm.select %128, %93, %61 : i1, i128
    %130 = llvm.mlir.constant(260 : i388) : i388
    %131 = llvm.zext %129 : i128 to i388
    %132 = llvm.shl %131, %130  : i388
    %133 = llvm.zext %124 : i260 to i388
    %134 = llvm.or %132, %133  : i388
    %135 = llvm.mlir.constant(3 : i8) : i8
    %136 = llvm.lshr %104, %135  : i8
    %137 = llvm.trunc %136 : i8 to i1
    %138 = llvm.and %137, %98  : i1
    %139 = llvm.select %138, %93, %55 : i1, i128
    %140 = llvm.mlir.constant(388 : i516) : i516
    %141 = llvm.zext %139 : i128 to i516
    %142 = llvm.shl %141, %140  : i516
    %143 = llvm.zext %134 : i388 to i516
    %144 = llvm.or %142, %143  : i516
    %145 = llvm.mlir.constant(4 : i8) : i8
    %146 = llvm.lshr %104, %145  : i8
    %147 = llvm.trunc %146 : i8 to i1
    %148 = llvm.and %147, %98  : i1
    %149 = llvm.select %148, %93, %49 : i1, i128
    %150 = llvm.mlir.constant(516 : i644) : i644
    %151 = llvm.zext %149 : i128 to i644
    %152 = llvm.shl %151, %150  : i644
    %153 = llvm.zext %144 : i516 to i644
    %154 = llvm.or %152, %153  : i644
    %155 = llvm.mlir.constant(5 : i8) : i8
    %156 = llvm.lshr %104, %155  : i8
    %157 = llvm.trunc %156 : i8 to i1
    %158 = llvm.and %157, %98  : i1
    %159 = llvm.select %158, %93, %43 : i1, i128
    %160 = llvm.mlir.constant(644 : i772) : i772
    %161 = llvm.zext %159 : i128 to i772
    %162 = llvm.shl %161, %160  : i772
    %163 = llvm.zext %154 : i644 to i772
    %164 = llvm.or %162, %163  : i772
    %165 = llvm.mlir.constant(6 : i8) : i8
    %166 = llvm.lshr %104, %165  : i8
    %167 = llvm.trunc %166 : i8 to i1
    %168 = llvm.and %167, %98  : i1
    %169 = llvm.select %168, %93, %37 : i1, i128
    %170 = llvm.mlir.constant(772 : i900) : i900
    %171 = llvm.zext %169 : i128 to i900
    %172 = llvm.shl %171, %170  : i900
    %173 = llvm.zext %164 : i772 to i900
    %174 = llvm.or %172, %173  : i900
    %175 = llvm.mlir.constant(7 : i8) : i8
    %176 = llvm.lshr %104, %175  : i8
    %177 = llvm.trunc %176 : i8 to i1
    %178 = llvm.and %177, %98  : i1
    %179 = llvm.select %178, %93, %31 : i1, i128
    %180 = llvm.mlir.constant(900 : i1028) : i1028
    %181 = llvm.zext %179 : i128 to i1028
    %182 = llvm.shl %181, %180  : i1028
    %183 = llvm.zext %174 : i900 to i1028
    %184 = llvm.or %182, %183  : i1028
    %185 = llvm.icmp "eq" %8, %80 : i4
    %186 = llvm.or %15, %185  : i1
    %187 = llvm.mlir.constant(1028 : i1029) : i1029
    %188 = llvm.zext %186 : i1 to i1029
    %189 = llvm.shl %188, %187  : i1029
    %190 = llvm.zext %184 : i1028 to i1029
    %191 = llvm.or %189, %190  : i1029
    %192 = llvm.select %81, %191, %4 : i1, i1029
    %193 = llvm.call @nd_bv128() : () -> i128
    %194 = llvm.mlir.constant(4 : i132) : i132
    %195 = llvm.zext %193 : i128 to i132
    %196 = llvm.shl %195, %194  : i132
    %197 = llvm.zext %82 : i4 to i132
    %198 = llvm.or %196, %197  : i132
    %199 = llvm.call @nd_bv128() : () -> i128
    %200 = llvm.mlir.constant(132 : i260) : i260
    %201 = llvm.zext %199 : i128 to i260
    %202 = llvm.shl %201, %200  : i260
    %203 = llvm.zext %198 : i132 to i260
    %204 = llvm.or %202, %203  : i260
    %205 = llvm.call @nd_bv128() : () -> i128
    %206 = llvm.mlir.constant(260 : i388) : i388
    %207 = llvm.zext %205 : i128 to i388
    %208 = llvm.shl %207, %206  : i388
    %209 = llvm.zext %204 : i260 to i388
    %210 = llvm.or %208, %209  : i388
    %211 = llvm.call @nd_bv128() : () -> i128
    %212 = llvm.mlir.constant(388 : i516) : i516
    %213 = llvm.zext %211 : i128 to i516
    %214 = llvm.shl %213, %212  : i516
    %215 = llvm.zext %210 : i388 to i516
    %216 = llvm.or %214, %215  : i516
    %217 = llvm.call @nd_bv128() : () -> i128
    %218 = llvm.mlir.constant(516 : i644) : i644
    %219 = llvm.zext %217 : i128 to i644
    %220 = llvm.shl %219, %218  : i644
    %221 = llvm.zext %216 : i516 to i644
    %222 = llvm.or %220, %221  : i644
    %223 = llvm.call @nd_bv128() : () -> i128
    %224 = llvm.mlir.constant(644 : i772) : i772
    %225 = llvm.zext %223 : i128 to i772
    %226 = llvm.shl %225, %224  : i772
    %227 = llvm.zext %222 : i644 to i772
    %228 = llvm.or %226, %227  : i772
    %229 = llvm.call @nd_bv128() : () -> i128
    %230 = llvm.mlir.constant(772 : i900) : i900
    %231 = llvm.zext %229 : i128 to i900
    %232 = llvm.shl %231, %230  : i900
    %233 = llvm.zext %228 : i772 to i900
    %234 = llvm.or %232, %233  : i900
    %235 = llvm.call @nd_bv128() : () -> i128
    %236 = llvm.mlir.constant(900 : i1028) : i1028
    %237 = llvm.zext %235 : i128 to i1028
    %238 = llvm.shl %237, %236  : i1028
    %239 = llvm.zext %234 : i900 to i1028
    %240 = llvm.or %238, %239  : i1028
    %241 = llvm.mlir.constant(1028 : i1029) : i1029
    %242 = llvm.zext %23 : i1 to i1029
    %243 = llvm.shl %242, %241  : i1029
    %244 = llvm.zext %240 : i1028 to i1029
    %245 = llvm.or %243, %244  : i1029
    %246 = llvm.select %24, %245, %192 : i1, i1029
    %247 = llvm.zext %77 : i1 to i4
    %248 = llvm.add %11, %247  : i4
    %249 = llvm.mlir.constant(3 : i1029) : i1029
    %250 = llvm.lshr %5, %249  : i1029
    %251 = llvm.trunc %250 : i1029 to i1
    %252 = llvm.mlir.constant(true) : i1
    %253 = llvm.xor %251, %252  : i1
    %254 = llvm.mlir.constant(0 : i1029) : i1029
    %255 = llvm.lshr %5, %254  : i1029
    %256 = llvm.trunc %255 : i1029 to i3
    %257 = llvm.zext %256 : i3 to i8
    %258 = llvm.zext %77 : i1 to i8
    %259 = llvm.shl %258, %257  : i8
    %260 = llvm.mlir.constant(0 : i8) : i8
    %261 = llvm.lshr %259, %260  : i8
    %262 = llvm.trunc %261 : i8 to i1
    %263 = llvm.and %262, %253  : i1
    %264 = llvm.select %263, %79, %76 : i1, i128
    %265 = llvm.mlir.constant(4 : i132) : i132
    %266 = llvm.zext %264 : i128 to i132
    %267 = llvm.shl %266, %265  : i132
    %268 = llvm.zext %248 : i4 to i132
    %269 = llvm.or %267, %268  : i132
    %270 = llvm.mlir.constant(1 : i8) : i8
    %271 = llvm.lshr %259, %270  : i8
    %272 = llvm.trunc %271 : i8 to i1
    %273 = llvm.and %272, %253  : i1
    %274 = llvm.select %273, %79, %70 : i1, i128
    %275 = llvm.mlir.constant(132 : i260) : i260
    %276 = llvm.zext %274 : i128 to i260
    %277 = llvm.shl %276, %275  : i260
    %278 = llvm.zext %269 : i132 to i260
    %279 = llvm.or %277, %278  : i260
    %280 = llvm.mlir.constant(2 : i8) : i8
    %281 = llvm.lshr %259, %280  : i8
    %282 = llvm.trunc %281 : i8 to i1
    %283 = llvm.and %282, %253  : i1
    %284 = llvm.select %283, %79, %64 : i1, i128
    %285 = llvm.mlir.constant(260 : i388) : i388
    %286 = llvm.zext %284 : i128 to i388
    %287 = llvm.shl %286, %285  : i388
    %288 = llvm.zext %279 : i260 to i388
    %289 = llvm.or %287, %288  : i388
    %290 = llvm.mlir.constant(3 : i8) : i8
    %291 = llvm.lshr %259, %290  : i8
    %292 = llvm.trunc %291 : i8 to i1
    %293 = llvm.and %292, %253  : i1
    %294 = llvm.select %293, %79, %58 : i1, i128
    %295 = llvm.mlir.constant(388 : i516) : i516
    %296 = llvm.zext %294 : i128 to i516
    %297 = llvm.shl %296, %295  : i516
    %298 = llvm.zext %289 : i388 to i516
    %299 = llvm.or %297, %298  : i516
    %300 = llvm.mlir.constant(4 : i8) : i8
    %301 = llvm.lshr %259, %300  : i8
    %302 = llvm.trunc %301 : i8 to i1
    %303 = llvm.and %302, %253  : i1
    %304 = llvm.select %303, %79, %52 : i1, i128
    %305 = llvm.mlir.constant(516 : i644) : i644
    %306 = llvm.zext %304 : i128 to i644
    %307 = llvm.shl %306, %305  : i644
    %308 = llvm.zext %299 : i516 to i644
    %309 = llvm.or %307, %308  : i644
    %310 = llvm.mlir.constant(5 : i8) : i8
    %311 = llvm.lshr %259, %310  : i8
    %312 = llvm.trunc %311 : i8 to i1
    %313 = llvm.and %312, %253  : i1
    %314 = llvm.select %313, %79, %46 : i1, i128
    %315 = llvm.mlir.constant(644 : i772) : i772
    %316 = llvm.zext %314 : i128 to i772
    %317 = llvm.shl %316, %315  : i772
    %318 = llvm.zext %309 : i644 to i772
    %319 = llvm.or %317, %318  : i772
    %320 = llvm.mlir.constant(6 : i8) : i8
    %321 = llvm.lshr %259, %320  : i8
    %322 = llvm.trunc %321 : i8 to i1
    %323 = llvm.and %322, %253  : i1
    %324 = llvm.select %323, %79, %40 : i1, i128
    %325 = llvm.mlir.constant(772 : i900) : i900
    %326 = llvm.zext %324 : i128 to i900
    %327 = llvm.shl %326, %325  : i900
    %328 = llvm.zext %319 : i772 to i900
    %329 = llvm.or %327, %328  : i900
    %330 = llvm.mlir.constant(7 : i8) : i8
    %331 = llvm.lshr %259, %330  : i8
    %332 = llvm.trunc %331 : i8 to i1
    %333 = llvm.and %332, %253  : i1
    %334 = llvm.select %333, %79, %34 : i1, i128
    %335 = llvm.mlir.constant(900 : i1028) : i1028
    %336 = llvm.zext %334 : i128 to i1028
    %337 = llvm.shl %336, %335  : i1028
    %338 = llvm.zext %329 : i900 to i1028
    %339 = llvm.or %337, %338  : i1028
    %340 = llvm.icmp "eq" %11, %80 : i4
    %341 = llvm.or %18, %340  : i1
    %342 = llvm.mlir.constant(1028 : i1029) : i1029
    %343 = llvm.zext %341 : i1 to i1029
    %344 = llvm.shl %343, %342  : i1029
    %345 = llvm.zext %339 : i1028 to i1029
    %346 = llvm.or %344, %345  : i1029
    %347 = llvm.select %81, %346, %5 : i1, i1029
    %348 = llvm.select %24, %245, %347 : i1, i1029
    %349 = llvm.select %24, %23, %2 : i1, i1
    %350 = llvm.mlir.constant(true) : i1
    %351 = llvm.xor %349, %350  : i1
    %352 = llvm.select %24, %23, %3 : i1, i1
    %353 = llvm.and %352, %351  : i1
    %354 = llvm.mlir.constant(true) : i1
    %355 = llvm.xor %353, %354  : i1
    llvm.cond_br %355, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%25, %28, %246, %348 : i1, i1, i1029, i1029)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

