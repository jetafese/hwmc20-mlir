module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv128() -> i128
  llvm.func @nd_bv8() -> i8
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.mlir.constant(0 : i1029) : i1029
    llvm.br ^bb1(%0, %0, %1, %1 : i1, i1, i1029, i1029)
  ^bb1(%2: i1, %3: i1, %4: i1029, %5: i1029):  // 2 preds: ^bb0, ^bb2
    %6 = llvm.mlir.constant(0 : i1029) : i1029
    %7 = llvm.lshr %4, %6  : i1029
    %8 = llvm.trunc %7 : i1029 to i4
    %9 = llvm.mlir.constant(0 : i1029) : i1029
    %10 = llvm.lshr %5, %9  : i1029
    %11 = llvm.trunc %10 : i1029 to i4
    %12 = llvm.icmp "eq" %11, %8 : i4
    %13 = llvm.mlir.constant(1028 : i1029) : i1029
    %14 = llvm.lshr %4, %13  : i1029
    %15 = llvm.trunc %14 : i1029 to i1
    %16 = llvm.mlir.constant(1028 : i1029) : i1029
    %17 = llvm.lshr %5, %16  : i1029
    %18 = llvm.trunc %17 : i1029 to i1
    %19 = llvm.xor %18, %15  : i1
    %20 = llvm.mlir.constant(true) : i1
    %21 = llvm.xor %19, %20  : i1
    %22 = llvm.and %21, %12  : i1
    %23 = llvm.mlir.constant(false) : i1
    %24 = llvm.call @nd_bv8() : () -> i8
    %25 = llvm.trunc %24 : i8 to i1
    %26 = llvm.select %25, %23, %22 : i1, i1
    %27 = llvm.mlir.constant(true) : i1
    %28 = llvm.xor %22, %27  : i1
    %29 = llvm.select %25, %23, %28 : i1, i1
    %30 = llvm.mlir.constant(900 : i1029) : i1029
    %31 = llvm.lshr %4, %30  : i1029
    %32 = llvm.trunc %31 : i1029 to i128
    %33 = llvm.mlir.constant(900 : i1029) : i1029
    %34 = llvm.lshr %5, %33  : i1029
    %35 = llvm.trunc %34 : i1029 to i128
    %36 = llvm.mlir.constant(772 : i1029) : i1029
    %37 = llvm.lshr %4, %36  : i1029
    %38 = llvm.trunc %37 : i1029 to i128
    %39 = llvm.mlir.constant(772 : i1029) : i1029
    %40 = llvm.lshr %5, %39  : i1029
    %41 = llvm.trunc %40 : i1029 to i128
    %42 = llvm.mlir.constant(644 : i1029) : i1029
    %43 = llvm.lshr %4, %42  : i1029
    %44 = llvm.trunc %43 : i1029 to i128
    %45 = llvm.mlir.constant(644 : i1029) : i1029
    %46 = llvm.lshr %5, %45  : i1029
    %47 = llvm.trunc %46 : i1029 to i128
    %48 = llvm.mlir.constant(516 : i1029) : i1029
    %49 = llvm.lshr %4, %48  : i1029
    %50 = llvm.trunc %49 : i1029 to i128
    %51 = llvm.mlir.constant(516 : i1029) : i1029
    %52 = llvm.lshr %5, %51  : i1029
    %53 = llvm.trunc %52 : i1029 to i128
    %54 = llvm.mlir.constant(388 : i1029) : i1029
    %55 = llvm.lshr %4, %54  : i1029
    %56 = llvm.trunc %55 : i1029 to i128
    %57 = llvm.mlir.constant(388 : i1029) : i1029
    %58 = llvm.lshr %5, %57  : i1029
    %59 = llvm.trunc %58 : i1029 to i128
    %60 = llvm.mlir.constant(260 : i1029) : i1029
    %61 = llvm.lshr %4, %60  : i1029
    %62 = llvm.trunc %61 : i1029 to i128
    %63 = llvm.mlir.constant(260 : i1029) : i1029
    %64 = llvm.lshr %5, %63  : i1029
    %65 = llvm.trunc %64 : i1029 to i128
    %66 = llvm.mlir.constant(132 : i1029) : i1029
    %67 = llvm.lshr %4, %66  : i1029
    %68 = llvm.trunc %67 : i1029 to i128
    %69 = llvm.mlir.constant(132 : i1029) : i1029
    %70 = llvm.lshr %5, %69  : i1029
    %71 = llvm.trunc %70 : i1029 to i128
    %72 = llvm.mlir.constant(4 : i1029) : i1029
    %73 = llvm.lshr %4, %72  : i1029
    %74 = llvm.trunc %73 : i1029 to i128
    %75 = llvm.mlir.constant(4 : i1029) : i1029
    %76 = llvm.lshr %5, %75  : i1029
    %77 = llvm.trunc %76 : i1029 to i128
    %78 = llvm.mlir.constant(true) : i1
    %79 = llvm.call @nd_bv8() : () -> i8
    %80 = llvm.call @nd_bv128() : () -> i128
    %81 = llvm.mlir.constant(-8 : i4) : i4
    %82 = llvm.call @nd_bv8() : () -> i8
    %83 = llvm.trunc %82 : i8 to i1
    %84 = llvm.mlir.constant(0 : i4) : i4
    %85 = llvm.call @nd_bv128() : () -> i128
    %86 = llvm.call @nd_bv128() : () -> i128
    %87 = llvm.call @nd_bv128() : () -> i128
    %88 = llvm.call @nd_bv128() : () -> i128
    %89 = llvm.call @nd_bv128() : () -> i128
    %90 = llvm.call @nd_bv128() : () -> i128
    %91 = llvm.call @nd_bv128() : () -> i128
    %92 = llvm.call @nd_bv128() : () -> i128
    %93 = llvm.zext %78 : i1 to i4
    %94 = llvm.add %8, %93  : i4
    %95 = llvm.call @nd_bv128() : () -> i128
    %96 = llvm.mlir.constant(3 : i1029) : i1029
    %97 = llvm.lshr %4, %96  : i1029
    %98 = llvm.trunc %97 : i1029 to i1
    %99 = llvm.mlir.constant(true) : i1
    %100 = llvm.xor %98, %99  : i1
    %101 = llvm.mlir.constant(0 : i1029) : i1029
    %102 = llvm.lshr %4, %101  : i1029
    %103 = llvm.trunc %102 : i1029 to i3
    %104 = llvm.zext %103 : i3 to i8
    %105 = llvm.zext %78 : i1 to i8
    %106 = llvm.shl %105, %104  : i8
    %107 = llvm.mlir.constant(0 : i8) : i8
    %108 = llvm.lshr %106, %107  : i8
    %109 = llvm.trunc %108 : i8 to i1
    %110 = llvm.and %109, %100  : i1
    %111 = llvm.select %110, %95, %74 : i1, i128
    %112 = llvm.mlir.constant(4 : i132) : i132
    %113 = llvm.zext %111 : i128 to i132
    %114 = llvm.shl %113, %112  : i132
    %115 = llvm.zext %94 : i4 to i132
    %116 = llvm.or %114, %115  : i132
    %117 = llvm.mlir.constant(1 : i8) : i8
    %118 = llvm.lshr %106, %117  : i8
    %119 = llvm.trunc %118 : i8 to i1
    %120 = llvm.and %119, %100  : i1
    %121 = llvm.select %120, %95, %68 : i1, i128
    %122 = llvm.mlir.constant(132 : i260) : i260
    %123 = llvm.zext %121 : i128 to i260
    %124 = llvm.shl %123, %122  : i260
    %125 = llvm.zext %116 : i132 to i260
    %126 = llvm.or %124, %125  : i260
    %127 = llvm.mlir.constant(2 : i8) : i8
    %128 = llvm.lshr %106, %127  : i8
    %129 = llvm.trunc %128 : i8 to i1
    %130 = llvm.and %129, %100  : i1
    %131 = llvm.select %130, %95, %62 : i1, i128
    %132 = llvm.mlir.constant(260 : i388) : i388
    %133 = llvm.zext %131 : i128 to i388
    %134 = llvm.shl %133, %132  : i388
    %135 = llvm.zext %126 : i260 to i388
    %136 = llvm.or %134, %135  : i388
    %137 = llvm.mlir.constant(3 : i8) : i8
    %138 = llvm.lshr %106, %137  : i8
    %139 = llvm.trunc %138 : i8 to i1
    %140 = llvm.and %139, %100  : i1
    %141 = llvm.select %140, %95, %56 : i1, i128
    %142 = llvm.mlir.constant(388 : i516) : i516
    %143 = llvm.zext %141 : i128 to i516
    %144 = llvm.shl %143, %142  : i516
    %145 = llvm.zext %136 : i388 to i516
    %146 = llvm.or %144, %145  : i516
    %147 = llvm.mlir.constant(4 : i8) : i8
    %148 = llvm.lshr %106, %147  : i8
    %149 = llvm.trunc %148 : i8 to i1
    %150 = llvm.and %149, %100  : i1
    %151 = llvm.select %150, %95, %50 : i1, i128
    %152 = llvm.mlir.constant(516 : i644) : i644
    %153 = llvm.zext %151 : i128 to i644
    %154 = llvm.shl %153, %152  : i644
    %155 = llvm.zext %146 : i516 to i644
    %156 = llvm.or %154, %155  : i644
    %157 = llvm.mlir.constant(5 : i8) : i8
    %158 = llvm.lshr %106, %157  : i8
    %159 = llvm.trunc %158 : i8 to i1
    %160 = llvm.and %159, %100  : i1
    %161 = llvm.select %160, %95, %44 : i1, i128
    %162 = llvm.mlir.constant(644 : i772) : i772
    %163 = llvm.zext %161 : i128 to i772
    %164 = llvm.shl %163, %162  : i772
    %165 = llvm.zext %156 : i644 to i772
    %166 = llvm.or %164, %165  : i772
    %167 = llvm.mlir.constant(6 : i8) : i8
    %168 = llvm.lshr %106, %167  : i8
    %169 = llvm.trunc %168 : i8 to i1
    %170 = llvm.and %169, %100  : i1
    %171 = llvm.select %170, %95, %38 : i1, i128
    %172 = llvm.mlir.constant(772 : i900) : i900
    %173 = llvm.zext %171 : i128 to i900
    %174 = llvm.shl %173, %172  : i900
    %175 = llvm.zext %166 : i772 to i900
    %176 = llvm.or %174, %175  : i900
    %177 = llvm.mlir.constant(7 : i8) : i8
    %178 = llvm.lshr %106, %177  : i8
    %179 = llvm.trunc %178 : i8 to i1
    %180 = llvm.and %179, %100  : i1
    %181 = llvm.select %180, %95, %32 : i1, i128
    %182 = llvm.mlir.constant(900 : i1028) : i1028
    %183 = llvm.zext %181 : i128 to i1028
    %184 = llvm.shl %183, %182  : i1028
    %185 = llvm.zext %176 : i900 to i1028
    %186 = llvm.or %184, %185  : i1028
    %187 = llvm.icmp "eq" %8, %81 : i4
    %188 = llvm.or %15, %187  : i1
    %189 = llvm.mlir.constant(1028 : i1029) : i1029
    %190 = llvm.zext %188 : i1 to i1029
    %191 = llvm.shl %190, %189  : i1029
    %192 = llvm.zext %186 : i1028 to i1029
    %193 = llvm.or %191, %192  : i1029
    %194 = llvm.select %83, %193, %4 : i1, i1029
    %195 = llvm.call @nd_bv128() : () -> i128
    %196 = llvm.mlir.constant(4 : i132) : i132
    %197 = llvm.zext %195 : i128 to i132
    %198 = llvm.shl %197, %196  : i132
    %199 = llvm.zext %84 : i4 to i132
    %200 = llvm.or %198, %199  : i132
    %201 = llvm.call @nd_bv128() : () -> i128
    %202 = llvm.mlir.constant(132 : i260) : i260
    %203 = llvm.zext %201 : i128 to i260
    %204 = llvm.shl %203, %202  : i260
    %205 = llvm.zext %200 : i132 to i260
    %206 = llvm.or %204, %205  : i260
    %207 = llvm.call @nd_bv128() : () -> i128
    %208 = llvm.mlir.constant(260 : i388) : i388
    %209 = llvm.zext %207 : i128 to i388
    %210 = llvm.shl %209, %208  : i388
    %211 = llvm.zext %206 : i260 to i388
    %212 = llvm.or %210, %211  : i388
    %213 = llvm.call @nd_bv128() : () -> i128
    %214 = llvm.mlir.constant(388 : i516) : i516
    %215 = llvm.zext %213 : i128 to i516
    %216 = llvm.shl %215, %214  : i516
    %217 = llvm.zext %212 : i388 to i516
    %218 = llvm.or %216, %217  : i516
    %219 = llvm.call @nd_bv128() : () -> i128
    %220 = llvm.mlir.constant(516 : i644) : i644
    %221 = llvm.zext %219 : i128 to i644
    %222 = llvm.shl %221, %220  : i644
    %223 = llvm.zext %218 : i516 to i644
    %224 = llvm.or %222, %223  : i644
    %225 = llvm.call @nd_bv128() : () -> i128
    %226 = llvm.mlir.constant(644 : i772) : i772
    %227 = llvm.zext %225 : i128 to i772
    %228 = llvm.shl %227, %226  : i772
    %229 = llvm.zext %224 : i644 to i772
    %230 = llvm.or %228, %229  : i772
    %231 = llvm.call @nd_bv128() : () -> i128
    %232 = llvm.mlir.constant(772 : i900) : i900
    %233 = llvm.zext %231 : i128 to i900
    %234 = llvm.shl %233, %232  : i900
    %235 = llvm.zext %230 : i772 to i900
    %236 = llvm.or %234, %235  : i900
    %237 = llvm.call @nd_bv128() : () -> i128
    %238 = llvm.mlir.constant(900 : i1028) : i1028
    %239 = llvm.zext %237 : i128 to i1028
    %240 = llvm.shl %239, %238  : i1028
    %241 = llvm.zext %236 : i900 to i1028
    %242 = llvm.or %240, %241  : i1028
    %243 = llvm.mlir.constant(1028 : i1029) : i1029
    %244 = llvm.zext %23 : i1 to i1029
    %245 = llvm.shl %244, %243  : i1029
    %246 = llvm.zext %242 : i1028 to i1029
    %247 = llvm.or %245, %246  : i1029
    %248 = llvm.select %25, %247, %194 : i1, i1029
    %249 = llvm.zext %78 : i1 to i4
    %250 = llvm.add %11, %249  : i4
    %251 = llvm.mlir.constant(3 : i1029) : i1029
    %252 = llvm.lshr %5, %251  : i1029
    %253 = llvm.trunc %252 : i1029 to i1
    %254 = llvm.mlir.constant(true) : i1
    %255 = llvm.xor %253, %254  : i1
    %256 = llvm.mlir.constant(0 : i1029) : i1029
    %257 = llvm.lshr %5, %256  : i1029
    %258 = llvm.trunc %257 : i1029 to i3
    %259 = llvm.zext %258 : i3 to i8
    %260 = llvm.zext %78 : i1 to i8
    %261 = llvm.shl %260, %259  : i8
    %262 = llvm.mlir.constant(0 : i8) : i8
    %263 = llvm.lshr %261, %262  : i8
    %264 = llvm.trunc %263 : i8 to i1
    %265 = llvm.and %264, %255  : i1
    %266 = llvm.select %265, %80, %77 : i1, i128
    %267 = llvm.mlir.constant(4 : i132) : i132
    %268 = llvm.zext %266 : i128 to i132
    %269 = llvm.shl %268, %267  : i132
    %270 = llvm.zext %250 : i4 to i132
    %271 = llvm.or %269, %270  : i132
    %272 = llvm.mlir.constant(1 : i8) : i8
    %273 = llvm.lshr %261, %272  : i8
    %274 = llvm.trunc %273 : i8 to i1
    %275 = llvm.and %274, %255  : i1
    %276 = llvm.select %275, %80, %71 : i1, i128
    %277 = llvm.mlir.constant(132 : i260) : i260
    %278 = llvm.zext %276 : i128 to i260
    %279 = llvm.shl %278, %277  : i260
    %280 = llvm.zext %271 : i132 to i260
    %281 = llvm.or %279, %280  : i260
    %282 = llvm.mlir.constant(2 : i8) : i8
    %283 = llvm.lshr %261, %282  : i8
    %284 = llvm.trunc %283 : i8 to i1
    %285 = llvm.and %284, %255  : i1
    %286 = llvm.select %285, %80, %65 : i1, i128
    %287 = llvm.mlir.constant(260 : i388) : i388
    %288 = llvm.zext %286 : i128 to i388
    %289 = llvm.shl %288, %287  : i388
    %290 = llvm.zext %281 : i260 to i388
    %291 = llvm.or %289, %290  : i388
    %292 = llvm.mlir.constant(3 : i8) : i8
    %293 = llvm.lshr %261, %292  : i8
    %294 = llvm.trunc %293 : i8 to i1
    %295 = llvm.and %294, %255  : i1
    %296 = llvm.select %295, %80, %59 : i1, i128
    %297 = llvm.mlir.constant(388 : i516) : i516
    %298 = llvm.zext %296 : i128 to i516
    %299 = llvm.shl %298, %297  : i516
    %300 = llvm.zext %291 : i388 to i516
    %301 = llvm.or %299, %300  : i516
    %302 = llvm.mlir.constant(4 : i8) : i8
    %303 = llvm.lshr %261, %302  : i8
    %304 = llvm.trunc %303 : i8 to i1
    %305 = llvm.and %304, %255  : i1
    %306 = llvm.select %305, %80, %53 : i1, i128
    %307 = llvm.mlir.constant(516 : i644) : i644
    %308 = llvm.zext %306 : i128 to i644
    %309 = llvm.shl %308, %307  : i644
    %310 = llvm.zext %301 : i516 to i644
    %311 = llvm.or %309, %310  : i644
    %312 = llvm.mlir.constant(5 : i8) : i8
    %313 = llvm.lshr %261, %312  : i8
    %314 = llvm.trunc %313 : i8 to i1
    %315 = llvm.and %314, %255  : i1
    %316 = llvm.select %315, %80, %47 : i1, i128
    %317 = llvm.mlir.constant(644 : i772) : i772
    %318 = llvm.zext %316 : i128 to i772
    %319 = llvm.shl %318, %317  : i772
    %320 = llvm.zext %311 : i644 to i772
    %321 = llvm.or %319, %320  : i772
    %322 = llvm.mlir.constant(6 : i8) : i8
    %323 = llvm.lshr %261, %322  : i8
    %324 = llvm.trunc %323 : i8 to i1
    %325 = llvm.and %324, %255  : i1
    %326 = llvm.select %325, %80, %41 : i1, i128
    %327 = llvm.mlir.constant(772 : i900) : i900
    %328 = llvm.zext %326 : i128 to i900
    %329 = llvm.shl %328, %327  : i900
    %330 = llvm.zext %321 : i772 to i900
    %331 = llvm.or %329, %330  : i900
    %332 = llvm.mlir.constant(7 : i8) : i8
    %333 = llvm.lshr %261, %332  : i8
    %334 = llvm.trunc %333 : i8 to i1
    %335 = llvm.and %334, %255  : i1
    %336 = llvm.select %335, %80, %35 : i1, i128
    %337 = llvm.mlir.constant(900 : i1028) : i1028
    %338 = llvm.zext %336 : i128 to i1028
    %339 = llvm.shl %338, %337  : i1028
    %340 = llvm.zext %331 : i900 to i1028
    %341 = llvm.or %339, %340  : i1028
    %342 = llvm.icmp "eq" %11, %81 : i4
    %343 = llvm.or %18, %342  : i1
    %344 = llvm.mlir.constant(1028 : i1029) : i1029
    %345 = llvm.zext %343 : i1 to i1029
    %346 = llvm.shl %345, %344  : i1029
    %347 = llvm.zext %341 : i1028 to i1029
    %348 = llvm.or %346, %347  : i1029
    %349 = llvm.select %83, %348, %5 : i1, i1029
    %350 = llvm.select %25, %247, %349 : i1, i1029
    %351 = llvm.select %25, %23, %2 : i1, i1
    %352 = llvm.mlir.constant(true) : i1
    %353 = llvm.xor %351, %352  : i1
    %354 = llvm.select %25, %23, %3 : i1, i1
    %355 = llvm.and %354, %353  : i1
    %356 = llvm.mlir.constant(true) : i1
    %357 = llvm.xor %355, %356  : i1
    llvm.cond_br %357, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%26, %29, %248, %350 : i1, i1, i1029, i1029)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

