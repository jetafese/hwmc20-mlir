module attributes {llvm.data_layout = ""} {
  llvm.func @verifier.error()
  llvm.func @nd_bv16() -> i16
  llvm.func @nd_bv2() -> i2
  llvm.func @nd_bv1() -> i1
  llvm.func @nd_bv8() -> i8
  llvm.func @nd_bv4() -> i4
  llvm.func @nd_array8xbv8() -> vector<8xi8>
  llvm.func @main() {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.call @nd_array8xbv8() : () -> vector<8xi8>
    %2 = llvm.call @nd_bv4() : () -> i4
    %3 = llvm.call @nd_bv4() : () -> i4
    %4 = llvm.call @nd_bv8() : () -> i8
    %5 = llvm.call @nd_bv1() : () -> i1
    %6 = llvm.call @nd_array8xbv8() : () -> vector<8xi8>
    %7 = llvm.call @nd_bv4() : () -> i4
    %8 = llvm.call @nd_bv4() : () -> i4
    %9 = llvm.call @nd_bv8() : () -> i8
    %10 = llvm.call @nd_bv1() : () -> i1
    %11 = llvm.call @nd_bv1() : () -> i1
    %12 = llvm.call @nd_bv4() : () -> i4
    %13 = llvm.call @nd_bv8() : () -> i8
    %14 = llvm.call @nd_bv1() : () -> i1
    %15 = llvm.call @nd_bv1() : () -> i1
    %16 = llvm.call @nd_bv1() : () -> i1
    %17 = llvm.call @nd_bv1() : () -> i1
    %18 = llvm.call @nd_bv1() : () -> i1
    %19 = llvm.call @nd_bv1() : () -> i1
    %20 = llvm.call @nd_bv1() : () -> i1
    %21 = llvm.call @nd_bv1() : () -> i1
    llvm.br ^bb1(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %0 : vector<8xi8>, i4, i4, i8, i1, vector<8xi8>, i4, i4, i8, i1, i1, i4, i8, i1)
  ^bb1(%22: vector<8xi8>, %23: i4, %24: i4, %25: i8, %26: i1, %27: vector<8xi8>, %28: i4, %29: i4, %30: i8, %31: i1, %32: i1, %33: i4, %34: i8, %35: i1):  // 2 preds: ^bb0, ^bb2
    %36 = llvm.call @nd_bv2() : () -> i2
    %37 = llvm.mlir.constant(1 : i2) : i2
    %38 = llvm.lshr %36, %37  : i2
    %39 = llvm.trunc %38 : i2 to i1
    %40 = llvm.zext %39 : i1 to i4
    %41 = llvm.add %23, %40  : i4
    %42 = llvm.call @nd_bv1() : () -> i1
    %43 = llvm.mlir.constant(-8 : i4) : i4
    %44 = llvm.zext %43 : i4 to i8
    %45 = llvm.icmp "uge" %25, %44 : i8
    %46 = llvm.icmp "eq" %24, %23 : i4
    %47 = llvm.mlir.constant(true) : i1
    %48 = llvm.xor %46, %47  : i1
    %49 = llvm.call @nd_bv2() : () -> i2
    %50 = llvm.mlir.constant(1 : i2) : i2
    %51 = llvm.lshr %49, %50  : i2
    %52 = llvm.trunc %51 : i2 to i1
    %53 = llvm.and %52, %48  : i1
    %54 = llvm.and %53, %45  : i1
    %55 = llvm.and %54, %26  : i1
    %56 = llvm.or %39, %55  : i1
    %57 = llvm.or %56, %42  : i1
    %58 = llvm.select %57, %41, %23 : i1, i4
    %59 = llvm.mlir.constant(0 : i4) : i4
    %60 = llvm.select %42, %59, %58 : i1, i4
    %61 = llvm.zext %55 : i1 to i4
    %62 = llvm.add %24, %61  : i4
    %63 = llvm.select %57, %62, %24 : i1, i4
    %64 = llvm.select %42, %59, %63 : i1, i4
    %65 = llvm.mlir.constant(-1 : i8) : i8
    %66 = llvm.mlir.constant(-1 : i8) : i8
    %67 = llvm.xor %65, %66  : i8
    %68 = llvm.mlir.constant(0 : i4) : i4
    %69 = llvm.lshr %23, %68  : i4
    %70 = llvm.trunc %69 : i4 to i3
    %71 = llvm.extractelement %22[%70 : i3] : vector<8xi8>
    %72 = llvm.and %71, %67  : i8
    %73 = llvm.extractelement %22[%70 : i3] : vector<8xi8>
    %74 = llvm.call @nd_bv16() : () -> i16
    %75 = llvm.mlir.constant(8 : i16) : i16
    %76 = llvm.lshr %74, %75  : i16
    %77 = llvm.trunc %76 : i16 to i8
    %78 = llvm.select %39, %77, %73 : i1, i8
    %79 = llvm.and %78, %65  : i8
    %80 = llvm.or %79, %72  : i8
    %81 = llvm.insertelement %80, %22[%70 : i3] : vector<8xi8>
    %82 = llvm.bitcast %65 : i8 to vector<8xi1>
    %83 = "llvm.intr.vector.reduce.or"(%82) : (vector<8xi1>) -> i1
    %84 = llvm.select %83, %81, %22 : i1, vector<8xi8>
    %85 = llvm.call @nd_bv16() : () -> i16
    %86 = llvm.mlir.constant(8 : i16) : i16
    %87 = llvm.lshr %85, %86  : i16
    %88 = llvm.trunc %87 : i16 to i8
    %89 = llvm.add %25, %88  : i8
    %90 = llvm.mlir.constant(true) : i1
    %91 = llvm.zext %90 : i1 to i3
    %92 = llvm.mlir.constant(false) : i1
    %93 = llvm.mlir.constant(1 : i2) : i2
    %94 = llvm.zext %92 : i1 to i2
    %95 = llvm.shl %94, %93  : i2
    %96 = llvm.zext %26 : i1 to i2
    %97 = llvm.or %95, %96  : i2
    %98 = llvm.zext %97 : i2 to i3
    %99 = llvm.add %98, %91  : i3
    %100 = llvm.mlir.constant(0 : i3) : i3
    %101 = llvm.lshr %99, %100  : i3
    %102 = llvm.trunc %101 : i3 to i1
    %103 = llvm.zext %102 : i1 to i2
    %104 = llvm.icmp "eq" %29, %28 : i4
    %105 = llvm.mlir.constant(true) : i1
    %106 = llvm.xor %104, %105  : i1
    %107 = llvm.mlir.constant(0 : i2) : i2
    %108 = llvm.lshr %49, %107  : i2
    %109 = llvm.trunc %108 : i2 to i1
    %110 = llvm.and %109, %106  : i1
    %111 = llvm.mlir.constant(1 : i2) : i2
    %112 = llvm.zext %53 : i1 to i2
    %113 = llvm.shl %112, %111  : i2
    %114 = llvm.zext %110 : i1 to i2
    %115 = llvm.or %113, %114  : i2
    %116 = llvm.lshr %115, %103  : i2
    %117 = llvm.mlir.constant(0 : i2) : i2
    %118 = llvm.lshr %116, %117  : i2
    %119 = llvm.trunc %118 : i2 to i1
    %120 = llvm.select %119, %102, %26 : i1, i1
    %121 = llvm.zext %90 : i1 to i3
    %122 = llvm.zext %90 : i1 to i2
    %123 = llvm.zext %26 : i1 to i2
    %124 = llvm.add %123, %122  : i2
    %125 = llvm.zext %124 : i2 to i3
    %126 = llvm.add %125, %121  : i3
    %127 = llvm.mlir.constant(0 : i3) : i3
    %128 = llvm.lshr %126, %127  : i3
    %129 = llvm.trunc %128 : i3 to i1
    %130 = llvm.mlir.constant(true) : i1
    %131 = llvm.xor %119, %130  : i1
    %132 = llvm.zext %129 : i1 to i2
    %133 = llvm.lshr %115, %132  : i2
    %134 = llvm.mlir.constant(0 : i2) : i2
    %135 = llvm.lshr %133, %134  : i2
    %136 = llvm.trunc %135 : i2 to i1
    %137 = llvm.and %136, %131  : i1
    %138 = llvm.select %137, %129, %120 : i1, i1
    %139 = llvm.select %138, %89, %25 : i1, i8
    %140 = llvm.zext %43 : i4 to i8
    %141 = llvm.sub %139, %140  : i8
    %142 = llvm.select %55, %141, %139 : i1, i8
    %143 = llvm.mlir.constant(true) : i1
    %144 = llvm.xor %53, %143  : i1
    %145 = llvm.and %26, %144  : i1
    %146 = llvm.select %145, %25, %142 : i1, i8
    %147 = llvm.mlir.constant(0 : i8) : i8
    %148 = llvm.select %42, %147, %146 : i1, i8
    %149 = llvm.or %138, %26  : i1
    %150 = llvm.select %149, %148, %25 : i1, i8
    %151 = llvm.select %42, %147, %150 : i1, i8
    %152 = llvm.zext %43 : i4 to i8
    %153 = llvm.icmp "ult" %148, %152 : i8
    %154 = llvm.or %144, %153  : i1
    %155 = llvm.and %26, %154  : i1
    %156 = llvm.and %55, %155  : i1
    %157 = llvm.zext %43 : i4 to i8
    %158 = llvm.mlir.constant(0 : i16) : i16
    %159 = llvm.lshr %85, %158  : i16
    %160 = llvm.trunc %159 : i16 to i8
    %161 = llvm.add %30, %160  : i8
    %162 = llvm.select %138, %30, %161 : i1, i8
    %163 = llvm.zext %43 : i4 to i8
    %164 = llvm.sub %162, %163  : i8
    %165 = llvm.mlir.constant(true) : i1
    %166 = llvm.xor %26, %165  : i1
    %167 = llvm.zext %43 : i4 to i8
    %168 = llvm.icmp "uge" %30, %167 : i8
    %169 = llvm.and %110, %168  : i1
    %170 = llvm.and %169, %166  : i1
    %171 = llvm.select %170, %164, %162 : i1, i8
    %172 = llvm.mlir.constant(true) : i1
    %173 = llvm.xor %110, %172  : i1
    %174 = llvm.and %166, %173  : i1
    %175 = llvm.select %174, %30, %171 : i1, i8
    %176 = llvm.select %42, %147, %175 : i1, i8
    %177 = llvm.icmp "ult" %176, %157 : i8
    %178 = llvm.or %173, %177  : i1
    %179 = llvm.and %166, %178  : i1
    %180 = llvm.and %170, %179  : i1
    %181 = llvm.mlir.constant(1 : i2) : i2
    %182 = llvm.zext %180 : i1 to i2
    %183 = llvm.shl %182, %181  : i2
    %184 = llvm.zext %156 : i1 to i2
    %185 = llvm.or %183, %184  : i2
    %186 = llvm.bitcast %185 : i2 to vector<2xi1>
    %187 = "llvm.intr.vector.reduce.or"(%186) : (vector<2xi1>) -> i1
    %188 = llvm.select %187, %138, %26 : i1, i1
    %189 = llvm.select %42, %92, %188 : i1, i1
    %190 = llvm.mlir.constant(0 : i2) : i2
    %191 = llvm.lshr %36, %190  : i2
    %192 = llvm.trunc %191 : i2 to i1
    %193 = llvm.zext %192 : i1 to i4
    %194 = llvm.add %28, %193  : i4
    %195 = llvm.or %192, %170  : i1
    %196 = llvm.or %195, %42  : i1
    %197 = llvm.select %196, %194, %28 : i1, i4
    %198 = llvm.select %42, %59, %197 : i1, i4
    %199 = llvm.zext %170 : i1 to i4
    %200 = llvm.add %29, %199  : i4
    %201 = llvm.select %196, %200, %29 : i1, i4
    %202 = llvm.select %42, %59, %201 : i1, i4
    %203 = llvm.mlir.constant(-1 : i8) : i8
    %204 = llvm.xor %65, %203  : i8
    %205 = llvm.mlir.constant(0 : i4) : i4
    %206 = llvm.lshr %28, %205  : i4
    %207 = llvm.trunc %206 : i4 to i3
    %208 = llvm.extractelement %27[%207 : i3] : vector<8xi8>
    %209 = llvm.and %208, %204  : i8
    %210 = llvm.extractelement %27[%207 : i3] : vector<8xi8>
    %211 = llvm.mlir.constant(0 : i16) : i16
    %212 = llvm.lshr %74, %211  : i16
    %213 = llvm.trunc %212 : i16 to i8
    %214 = llvm.select %192, %213, %210 : i1, i8
    %215 = llvm.and %214, %65  : i8
    %216 = llvm.or %215, %209  : i8
    %217 = llvm.insertelement %216, %27[%207 : i3] : vector<8xi8>
    %218 = llvm.bitcast %65 : i8 to vector<8xi1>
    %219 = "llvm.intr.vector.reduce.or"(%218) : (vector<8xi1>) -> i1
    %220 = llvm.select %219, %217, %27 : i1, vector<8xi8>
    %221 = llvm.mlir.constant(true) : i1
    %222 = llvm.xor %138, %221  : i1
    %223 = llvm.or %222, %166  : i1
    %224 = llvm.select %223, %176, %30 : i1, i8
    %225 = llvm.select %42, %147, %224 : i1, i8
    %226 = llvm.call @nd_bv1() : () -> i1
    %227 = llvm.and %226, %192  : i1
    %228 = llvm.or %31, %227  : i1
    %229 = llvm.select %31, %90, %228 : i1, i1
    %230 = llvm.select %42, %92, %229 : i1, i1
    %231 = llvm.zext %170 : i1 to i4
    %232 = llvm.mlir.constant(true) : i1
    %233 = llvm.xor %31, %232  : i1
    %234 = llvm.and %192, %233  : i1
    %235 = llvm.zext %234 : i1 to i4
    %236 = llvm.add %33, %235  : i4
    %237 = llvm.sub %236, %231  : i4
    %238 = llvm.select %42, %59, %237 : i1, i4
    %239 = llvm.bitcast %238 : i4 to vector<4xi1>
    %240 = "llvm.intr.vector.reduce.or"(%239) : (vector<4xi1>) -> i1
    %241 = llvm.mlir.constant(true) : i1
    %242 = llvm.xor %240, %241  : i1
    %243 = llvm.bitcast %33 : i4 to vector<4xi1>
    %244 = "llvm.intr.vector.reduce.or"(%243) : (vector<4xi1>) -> i1
    %245 = llvm.mlir.constant(true) : i1
    %246 = llvm.xor %32, %245  : i1
    %247 = llvm.and %31, %246  : i1
    %248 = llvm.and %247, %244  : i1
    %249 = llvm.and %248, %242  : i1
    %250 = llvm.or %249, %32  : i1
    %251 = llvm.select %42, %92, %250 : i1, i1
    %252 = llvm.or %196, %31  : i1
    %253 = llvm.select %252, %238, %33 : i1, i4
    %254 = llvm.select %42, %59, %253 : i1, i4
    %255 = llvm.and %227, %233  : i1
    %256 = llvm.select %255, %213, %34 : i1, i8
    %257 = llvm.select %42, %147, %256 : i1, i8
    %258 = llvm.mlir.constant(true) : i1
    %259 = llvm.xor %90, %258  : i1
    %260 = llvm.mlir.constant(true) : i1
    %261 = llvm.xor %109, %260  : i1
    %262 = llvm.mlir.constant(true) : i1
    %263 = llvm.xor %104, %262  : i1
    %264 = llvm.or %263, %261  : i1
    %265 = llvm.or %264, %259  : i1
    "llvm.intr.assume"(%265) : (i1) -> ()
    %266 = llvm.mlir.constant(true) : i1
    %267 = llvm.xor %90, %266  : i1
    %268 = llvm.mlir.constant(true) : i1
    %269 = llvm.xor %52, %268  : i1
    %270 = llvm.mlir.constant(true) : i1
    %271 = llvm.xor %46, %270  : i1
    %272 = llvm.or %271, %269  : i1
    %273 = llvm.or %272, %267  : i1
    "llvm.intr.assume"(%273) : (i1) -> ()
    %274 = llvm.mlir.constant(true) : i1
    %275 = llvm.xor %90, %274  : i1
    %276 = llvm.mlir.constant(true) : i1
    %277 = llvm.xor %192, %276  : i1
    %278 = llvm.mlir.constant(3 : i4) : i4
    %279 = llvm.lshr %28, %278  : i4
    %280 = llvm.trunc %279 : i4 to i1
    %281 = llvm.mlir.constant(3 : i4) : i4
    %282 = llvm.lshr %29, %281  : i4
    %283 = llvm.trunc %282 : i4 to i1
    %284 = llvm.icmp "ne" %283, %280 : i1
    %285 = llvm.mlir.constant(0 : i4) : i4
    %286 = llvm.lshr %29, %285  : i4
    %287 = llvm.trunc %286 : i4 to i3
    %288 = llvm.icmp "eq" %287, %207 : i3
    %289 = llvm.and %288, %284  : i1
    %290 = llvm.mlir.constant(true) : i1
    %291 = llvm.xor %289, %290  : i1
    %292 = llvm.or %291, %277  : i1
    %293 = llvm.or %292, %275  : i1
    "llvm.intr.assume"(%293) : (i1) -> ()
    %294 = llvm.mlir.constant(true) : i1
    %295 = llvm.xor %90, %294  : i1
    %296 = llvm.mlir.constant(true) : i1
    %297 = llvm.xor %39, %296  : i1
    %298 = llvm.mlir.constant(3 : i4) : i4
    %299 = llvm.lshr %23, %298  : i4
    %300 = llvm.trunc %299 : i4 to i1
    %301 = llvm.mlir.constant(3 : i4) : i4
    %302 = llvm.lshr %24, %301  : i4
    %303 = llvm.trunc %302 : i4 to i1
    %304 = llvm.icmp "ne" %303, %300 : i1
    %305 = llvm.mlir.constant(0 : i4) : i4
    %306 = llvm.lshr %24, %305  : i4
    %307 = llvm.trunc %306 : i4 to i3
    %308 = llvm.icmp "eq" %307, %70 : i3
    %309 = llvm.and %308, %304  : i1
    %310 = llvm.mlir.constant(true) : i1
    %311 = llvm.xor %309, %310  : i1
    %312 = llvm.or %311, %297  : i1
    %313 = llvm.or %312, %295  : i1
    "llvm.intr.assume"(%313) : (i1) -> ()
    %314 = llvm.mlir.constant(true) : i1
    %315 = llvm.xor %90, %314  : i1
    %316 = llvm.icmp "eq" %35, %42 : i1
    %317 = llvm.or %316, %315  : i1
    "llvm.intr.assume"(%317) : (i1) -> ()
    %318 = llvm.mlir.constant(1 : i2) : i2
    %319 = llvm.zext %170 : i1 to i2
    %320 = llvm.shl %319, %318  : i2
    %321 = llvm.zext %170 : i1 to i2
    %322 = llvm.or %320, %321  : i2
    %323 = llvm.mlir.constant(2 : i3) : i3
    %324 = llvm.zext %170 : i1 to i3
    %325 = llvm.shl %324, %323  : i3
    %326 = llvm.zext %322 : i2 to i3
    %327 = llvm.or %325, %326  : i3
    %328 = llvm.mlir.constant(3 : i4) : i4
    %329 = llvm.zext %170 : i1 to i4
    %330 = llvm.shl %329, %328  : i4
    %331 = llvm.zext %327 : i3 to i4
    %332 = llvm.or %330, %331  : i4
    %333 = llvm.mlir.constant(4 : i5) : i5
    %334 = llvm.zext %170 : i1 to i5
    %335 = llvm.shl %334, %333  : i5
    %336 = llvm.zext %332 : i4 to i5
    %337 = llvm.or %335, %336  : i5
    %338 = llvm.mlir.constant(5 : i6) : i6
    %339 = llvm.zext %170 : i1 to i6
    %340 = llvm.shl %339, %338  : i6
    %341 = llvm.zext %337 : i5 to i6
    %342 = llvm.or %340, %341  : i6
    %343 = llvm.mlir.constant(6 : i7) : i7
    %344 = llvm.zext %170 : i1 to i7
    %345 = llvm.shl %344, %343  : i7
    %346 = llvm.zext %342 : i6 to i7
    %347 = llvm.or %345, %346  : i7
    %348 = llvm.mlir.constant(7 : i8) : i8
    %349 = llvm.zext %170 : i1 to i8
    %350 = llvm.shl %349, %348  : i8
    %351 = llvm.zext %347 : i7 to i8
    %352 = llvm.or %350, %351  : i8
    %353 = llvm.extractelement %27[%287 : i3] : vector<8xi8>
    %354 = llvm.and %353, %352  : i8
    %355 = llvm.mlir.constant(1 : i2) : i2
    %356 = llvm.zext %55 : i1 to i2
    %357 = llvm.shl %356, %355  : i2
    %358 = llvm.zext %55 : i1 to i2
    %359 = llvm.or %357, %358  : i2
    %360 = llvm.mlir.constant(2 : i3) : i3
    %361 = llvm.zext %55 : i1 to i3
    %362 = llvm.shl %361, %360  : i3
    %363 = llvm.zext %359 : i2 to i3
    %364 = llvm.or %362, %363  : i3
    %365 = llvm.mlir.constant(3 : i4) : i4
    %366 = llvm.zext %55 : i1 to i4
    %367 = llvm.shl %366, %365  : i4
    %368 = llvm.zext %364 : i3 to i4
    %369 = llvm.or %367, %368  : i4
    %370 = llvm.mlir.constant(4 : i5) : i5
    %371 = llvm.zext %55 : i1 to i5
    %372 = llvm.shl %371, %370  : i5
    %373 = llvm.zext %369 : i4 to i5
    %374 = llvm.or %372, %373  : i5
    %375 = llvm.mlir.constant(5 : i6) : i6
    %376 = llvm.zext %55 : i1 to i6
    %377 = llvm.shl %376, %375  : i6
    %378 = llvm.zext %374 : i5 to i6
    %379 = llvm.or %377, %378  : i6
    %380 = llvm.mlir.constant(6 : i7) : i7
    %381 = llvm.zext %55 : i1 to i7
    %382 = llvm.shl %381, %380  : i7
    %383 = llvm.zext %379 : i6 to i7
    %384 = llvm.or %382, %383  : i7
    %385 = llvm.mlir.constant(7 : i8) : i8
    %386 = llvm.zext %55 : i1 to i8
    %387 = llvm.shl %386, %385  : i8
    %388 = llvm.zext %384 : i7 to i8
    %389 = llvm.or %387, %388  : i8
    %390 = llvm.extractelement %22[%307 : i3] : vector<8xi8>
    %391 = llvm.and %390, %389  : i8
    %392 = llvm.or %391, %354  : i8
    %393 = llvm.icmp "eq" %34, %392 : i8
    %394 = llvm.mlir.constant(true) : i1
    %395 = llvm.xor %249, %394  : i1
    %396 = llvm.or %395, %393  : i1
    %397 = llvm.mlir.constant(true) : i1
    %398 = llvm.xor %396, %397  : i1
    %399 = llvm.select %35, %92, %90 : i1, i1
    %400 = llvm.and %399, %398  : i1
    %401 = llvm.mlir.constant(true) : i1
    %402 = llvm.xor %400, %401  : i1
    llvm.cond_br %402, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %403 = llvm.call @nd_bv1() : () -> i1
    %404 = llvm.call @nd_bv1() : () -> i1
    %405 = llvm.call @nd_bv1() : () -> i1
    %406 = llvm.call @nd_bv1() : () -> i1
    %407 = llvm.call @nd_bv1() : () -> i1
    %408 = llvm.call @nd_bv1() : () -> i1
    %409 = llvm.call @nd_bv1() : () -> i1
    %410 = llvm.call @nd_bv1() : () -> i1
    llvm.br ^bb1(%84, %60, %64, %151, %189, %220, %198, %202, %225, %230, %251, %254, %257, %92 : vector<8xi8>, i4, i4, i8, i1, vector<8xi8>, i4, i4, i8, i1, i1, i4, i8, i1)
  ^bb3:  // pred: ^bb1
    llvm.call @verifier.error() : () -> ()
    llvm.unreachable
  }
}

